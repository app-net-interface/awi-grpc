// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package awi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecurityPolicyServiceClient is the client API for SecurityPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityPolicyServiceClient interface {
	CreateAccessPolicy(ctx context.Context, in *AccessPolicyCreateRequest, opts ...grpc.CallOption) (*AccessPolicyCreateResponse, error)
	DeleteAccessPolicy(ctx context.Context, in *AccessPolicyDeleteRequest, opts ...grpc.CallOption) (*AccessPolicyDeleteResponse, error)
	ListAccessPolicies(ctx context.Context, in *AccessPolicyListRequest, opts ...grpc.CallOption) (*AccessPolicyListResponse, error)
}

type securityPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityPolicyServiceClient(cc grpc.ClientConnInterface) SecurityPolicyServiceClient {
	return &securityPolicyServiceClient{cc}
}

func (c *securityPolicyServiceClient) CreateAccessPolicy(ctx context.Context, in *AccessPolicyCreateRequest, opts ...grpc.CallOption) (*AccessPolicyCreateResponse, error) {
	out := new(AccessPolicyCreateResponse)
	err := c.cc.Invoke(ctx, "/SecurityPolicyService/CreateAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPolicyServiceClient) DeleteAccessPolicy(ctx context.Context, in *AccessPolicyDeleteRequest, opts ...grpc.CallOption) (*AccessPolicyDeleteResponse, error) {
	out := new(AccessPolicyDeleteResponse)
	err := c.cc.Invoke(ctx, "/SecurityPolicyService/DeleteAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPolicyServiceClient) ListAccessPolicies(ctx context.Context, in *AccessPolicyListRequest, opts ...grpc.CallOption) (*AccessPolicyListResponse, error) {
	out := new(AccessPolicyListResponse)
	err := c.cc.Invoke(ctx, "/SecurityPolicyService/ListAccessPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityPolicyServiceServer is the server API for SecurityPolicyService service.
// All implementations must embed UnimplementedSecurityPolicyServiceServer
// for forward compatibility
type SecurityPolicyServiceServer interface {
	CreateAccessPolicy(context.Context, *AccessPolicyCreateRequest) (*AccessPolicyCreateResponse, error)
	DeleteAccessPolicy(context.Context, *AccessPolicyDeleteRequest) (*AccessPolicyDeleteResponse, error)
	ListAccessPolicies(context.Context, *AccessPolicyListRequest) (*AccessPolicyListResponse, error)
	mustEmbedUnimplementedSecurityPolicyServiceServer()
}

// UnimplementedSecurityPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecurityPolicyServiceServer struct {
}

func (UnimplementedSecurityPolicyServiceServer) CreateAccessPolicy(context.Context, *AccessPolicyCreateRequest) (*AccessPolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessPolicy not implemented")
}
func (UnimplementedSecurityPolicyServiceServer) DeleteAccessPolicy(context.Context, *AccessPolicyDeleteRequest) (*AccessPolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessPolicy not implemented")
}
func (UnimplementedSecurityPolicyServiceServer) ListAccessPolicies(context.Context, *AccessPolicyListRequest) (*AccessPolicyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessPolicies not implemented")
}
func (UnimplementedSecurityPolicyServiceServer) mustEmbedUnimplementedSecurityPolicyServiceServer() {}

// UnsafeSecurityPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityPolicyServiceServer will
// result in compilation errors.
type UnsafeSecurityPolicyServiceServer interface {
	mustEmbedUnimplementedSecurityPolicyServiceServer()
}

func RegisterSecurityPolicyServiceServer(s grpc.ServiceRegistrar, srv SecurityPolicyServiceServer) {
	s.RegisterService(&SecurityPolicyService_ServiceDesc, srv)
}

func _SecurityPolicyService_CreateAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessPolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPolicyServiceServer).CreateAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SecurityPolicyService/CreateAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPolicyServiceServer).CreateAccessPolicy(ctx, req.(*AccessPolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPolicyService_DeleteAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessPolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPolicyServiceServer).DeleteAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SecurityPolicyService/DeleteAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPolicyServiceServer).DeleteAccessPolicy(ctx, req.(*AccessPolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPolicyService_ListAccessPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessPolicyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPolicyServiceServer).ListAccessPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SecurityPolicyService/ListAccessPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPolicyServiceServer).ListAccessPolicies(ctx, req.(*AccessPolicyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityPolicyService_ServiceDesc is the grpc.ServiceDesc for SecurityPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SecurityPolicyService",
	HandlerType: (*SecurityPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccessPolicy",
			Handler:    _SecurityPolicyService_CreateAccessPolicy_Handler,
		},
		{
			MethodName: "DeleteAccessPolicy",
			Handler:    _SecurityPolicyService_DeleteAccessPolicy_Handler,
		},
		{
			MethodName: "ListAccessPolicies",
			Handler:    _SecurityPolicyService_ListAccessPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security_policy_service.proto",
}
