/**
 * Copyright (c) 2023 Cisco Systems, Inc. and its affiliates
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

// source: sla.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.Hard_SLA', null, global);
goog.exportSymbol('proto.Network_SLA', null, global);
goog.exportSymbol('proto.SLAResponse', null, global);
goog.exportSymbol('proto.Soft_SLA', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hard_SLA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Hard_SLA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hard_SLA.displayName = 'proto.Hard_SLA';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Soft_SLA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Soft_SLA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Soft_SLA.displayName = 'proto.Soft_SLA';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Network_SLA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Network_SLA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Network_SLA.displayName = 'proto.Network_SLA';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SLAResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SLAResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SLAResponse.displayName = 'proto.SLAResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hard_SLA.prototype.toObject = function(opt_includeInstance) {
  return proto.Hard_SLA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hard_SLA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hard_SLA.toObject = function(includeInstance, msg) {
  var f, obj = {
    bandwidth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    jitter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    latency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    loss: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hard_SLA}
 */
proto.Hard_SLA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hard_SLA;
  return proto.Hard_SLA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hard_SLA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hard_SLA}
 */
proto.Hard_SLA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBandwidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJitter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLoss(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hard_SLA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hard_SLA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hard_SLA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hard_SLA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBandwidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getJitter();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getLatency();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getLoss();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional uint32 bandwidth = 1;
 * @return {number}
 */
proto.Hard_SLA.prototype.getBandwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Hard_SLA} returns this
 */
proto.Hard_SLA.prototype.setBandwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 jitter = 2;
 * @return {number}
 */
proto.Hard_SLA.prototype.getJitter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Hard_SLA} returns this
 */
proto.Hard_SLA.prototype.setJitter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 latency = 3;
 * @return {number}
 */
proto.Hard_SLA.prototype.getLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Hard_SLA} returns this
 */
proto.Hard_SLA.prototype.setLatency = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double loss = 4;
 * @return {number}
 */
proto.Hard_SLA.prototype.getLoss = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Hard_SLA} returns this
 */
proto.Hard_SLA.prototype.setLoss = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Soft_SLA.prototype.toObject = function(opt_includeInstance) {
  return proto.Soft_SLA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Soft_SLA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Soft_SLA.toObject = function(includeInstance, msg) {
  var f, obj = {
    trafficProfile: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priority: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Soft_SLA}
 */
proto.Soft_SLA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Soft_SLA;
  return proto.Soft_SLA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Soft_SLA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Soft_SLA}
 */
proto.Soft_SLA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrafficProfile(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPriority(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Soft_SLA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Soft_SLA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Soft_SLA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Soft_SLA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrafficProfile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriority();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string traffic_profile = 1;
 * @return {string}
 */
proto.Soft_SLA.prototype.getTrafficProfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Soft_SLA} returns this
 */
proto.Soft_SLA.prototype.setTrafficProfile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string priority = 2;
 * @return {string}
 */
proto.Soft_SLA.prototype.getPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Soft_SLA} returns this
 */
proto.Soft_SLA.prototype.setPriority = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Network_SLA.prototype.toObject = function(opt_includeInstance) {
  return proto.Network_SLA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Network_SLA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Network_SLA.toObject = function(includeInstance, msg) {
  var f, obj = {
    hard: (f = msg.getHard()) && proto.Hard_SLA.toObject(includeInstance, f),
    soft: (f = msg.getSoft()) && proto.Soft_SLA.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Network_SLA}
 */
proto.Network_SLA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Network_SLA;
  return proto.Network_SLA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Network_SLA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Network_SLA}
 */
proto.Network_SLA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Hard_SLA;
      reader.readMessage(value,proto.Hard_SLA.deserializeBinaryFromReader);
      msg.setHard(value);
      break;
    case 2:
      var value = new proto.Soft_SLA;
      reader.readMessage(value,proto.Soft_SLA.deserializeBinaryFromReader);
      msg.setSoft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Network_SLA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Network_SLA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Network_SLA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Network_SLA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHard();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Hard_SLA.serializeBinaryToWriter
    );
  }
  f = message.getSoft();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Soft_SLA.serializeBinaryToWriter
    );
  }
};


/**
 * optional Hard_SLA hard = 1;
 * @return {?proto.Hard_SLA}
 */
proto.Network_SLA.prototype.getHard = function() {
  return /** @type{?proto.Hard_SLA} */ (
    jspb.Message.getWrapperField(this, proto.Hard_SLA, 1));
};


/**
 * @param {?proto.Hard_SLA|undefined} value
 * @return {!proto.Network_SLA} returns this
*/
proto.Network_SLA.prototype.setHard = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Network_SLA} returns this
 */
proto.Network_SLA.prototype.clearHard = function() {
  return this.setHard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Network_SLA.prototype.hasHard = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Soft_SLA soft = 2;
 * @return {?proto.Soft_SLA}
 */
proto.Network_SLA.prototype.getSoft = function() {
  return /** @type{?proto.Soft_SLA} */ (
    jspb.Message.getWrapperField(this, proto.Soft_SLA, 2));
};


/**
 * @param {?proto.Soft_SLA|undefined} value
 * @return {!proto.Network_SLA} returns this
*/
proto.Network_SLA.prototype.setSoft = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Network_SLA} returns this
 */
proto.Network_SLA.prototype.clearSoft = function() {
  return this.setSoft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Network_SLA.prototype.hasSoft = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SLAResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SLAResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SLAResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SLAResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    supportsHardNetworkSla: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    supportsSoftNetworkSla: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    availableHardNetworkSla: (f = msg.getAvailableHardNetworkSla()) && proto.Hard_SLA.toObject(includeInstance, f),
    meetsSla: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SLAResponse}
 */
proto.SLAResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SLAResponse;
  return proto.SLAResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SLAResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SLAResponse}
 */
proto.SLAResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsHardNetworkSla(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsSoftNetworkSla(value);
      break;
    case 3:
      var value = new proto.Hard_SLA;
      reader.readMessage(value,proto.Hard_SLA.deserializeBinaryFromReader);
      msg.setAvailableHardNetworkSla(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMeetsSla(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SLAResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SLAResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SLAResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SLAResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupportsHardNetworkSla();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSupportsSoftNetworkSla();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAvailableHardNetworkSla();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Hard_SLA.serializeBinaryToWriter
    );
  }
  f = message.getMeetsSla();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool supports_hard_network_sla = 1;
 * @return {boolean}
 */
proto.SLAResponse.prototype.getSupportsHardNetworkSla = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SLAResponse} returns this
 */
proto.SLAResponse.prototype.setSupportsHardNetworkSla = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool supports_soft_network_sla = 2;
 * @return {boolean}
 */
proto.SLAResponse.prototype.getSupportsSoftNetworkSla = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SLAResponse} returns this
 */
proto.SLAResponse.prototype.setSupportsSoftNetworkSla = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Hard_SLA available_hard_network_sla = 3;
 * @return {?proto.Hard_SLA}
 */
proto.SLAResponse.prototype.getAvailableHardNetworkSla = function() {
  return /** @type{?proto.Hard_SLA} */ (
    jspb.Message.getWrapperField(this, proto.Hard_SLA, 3));
};


/**
 * @param {?proto.Hard_SLA|undefined} value
 * @return {!proto.SLAResponse} returns this
*/
proto.SLAResponse.prototype.setAvailableHardNetworkSla = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SLAResponse} returns this
 */
proto.SLAResponse.prototype.clearAvailableHardNetworkSla = function() {
  return this.setAvailableHardNetworkSla(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SLAResponse.prototype.hasAvailableHardNetworkSla = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool meets_sla = 4;
 * @return {boolean}
 */
proto.SLAResponse.prototype.getMeetsSla = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.SLAResponse} returns this
 */
proto.SLAResponse.prototype.setMeetsSla = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


goog.object.extend(exports, proto);
