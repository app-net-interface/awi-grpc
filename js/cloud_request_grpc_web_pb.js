/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: cloud_request.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./cloud_request_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.CloudClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.CloudPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListInstancesRequest,
 *   !proto.ListInstancesResponse>}
 */
const methodDescriptor_Cloud_ListInstances = new grpc.web.MethodDescriptor(
  '/Cloud/ListInstances',
  grpc.web.MethodType.UNARY,
  proto.ListInstancesRequest,
  proto.ListInstancesResponse,
  /**
   * @param {!proto.ListInstancesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListInstancesResponse.deserializeBinary
);


/**
 * @param {!proto.ListInstancesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListInstancesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListInstancesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CloudClient.prototype.listInstances =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Cloud/ListInstances',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListInstances,
      callback);
};


/**
 * @param {!proto.ListInstancesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListInstancesResponse>}
 *     Promise that resolves to the response
 */
proto.CloudPromiseClient.prototype.listInstances =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Cloud/ListInstances',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListInstances);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListSubnetRequest,
 *   !proto.ListSubnetResponse>}
 */
const methodDescriptor_Cloud_ListSubnets = new grpc.web.MethodDescriptor(
  '/Cloud/ListSubnets',
  grpc.web.MethodType.UNARY,
  proto.ListSubnetRequest,
  proto.ListSubnetResponse,
  /**
   * @param {!proto.ListSubnetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListSubnetResponse.deserializeBinary
);


/**
 * @param {!proto.ListSubnetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListSubnetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListSubnetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CloudClient.prototype.listSubnets =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Cloud/ListSubnets',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListSubnets,
      callback);
};


/**
 * @param {!proto.ListSubnetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListSubnetResponse>}
 *     Promise that resolves to the response
 */
proto.CloudPromiseClient.prototype.listSubnets =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Cloud/ListSubnets',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListSubnets);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListSiteRequest,
 *   !proto.ListSiteResponse>}
 */
const methodDescriptor_Cloud_ListSites = new grpc.web.MethodDescriptor(
  '/Cloud/ListSites',
  grpc.web.MethodType.UNARY,
  proto.ListSiteRequest,
  proto.ListSiteResponse,
  /**
   * @param {!proto.ListSiteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListSiteResponse.deserializeBinary
);


/**
 * @param {!proto.ListSiteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListSiteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListSiteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CloudClient.prototype.listSites =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Cloud/ListSites',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListSites,
      callback);
};


/**
 * @param {!proto.ListSiteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListSiteResponse>}
 *     Promise that resolves to the response
 */
proto.CloudPromiseClient.prototype.listSites =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Cloud/ListSites',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListSites);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListVPCRequest,
 *   !proto.ListVPCResponse>}
 */
const methodDescriptor_Cloud_ListVPCs = new grpc.web.MethodDescriptor(
  '/Cloud/ListVPCs',
  grpc.web.MethodType.UNARY,
  proto.ListVPCRequest,
  proto.ListVPCResponse,
  /**
   * @param {!proto.ListVPCRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListVPCResponse.deserializeBinary
);


/**
 * @param {!proto.ListVPCRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListVPCResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListVPCResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CloudClient.prototype.listVPCs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Cloud/ListVPCs',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListVPCs,
      callback);
};


/**
 * @param {!proto.ListVPCRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListVPCResponse>}
 *     Promise that resolves to the response
 */
proto.CloudPromiseClient.prototype.listVPCs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Cloud/ListVPCs',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListVPCs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListVPCTagRequest,
 *   !proto.ListVPCResponse>}
 */
const methodDescriptor_Cloud_ListVPCTags = new grpc.web.MethodDescriptor(
  '/Cloud/ListVPCTags',
  grpc.web.MethodType.UNARY,
  proto.ListVPCTagRequest,
  proto.ListVPCResponse,
  /**
   * @param {!proto.ListVPCTagRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListVPCResponse.deserializeBinary
);


/**
 * @param {!proto.ListVPCTagRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListVPCResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListVPCResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CloudClient.prototype.listVPCTags =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Cloud/ListVPCTags',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListVPCTags,
      callback);
};


/**
 * @param {!proto.ListVPCTagRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListVPCResponse>}
 *     Promise that resolves to the response
 */
proto.CloudPromiseClient.prototype.listVPCTags =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Cloud/ListVPCTags',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListVPCTags);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListVPNRequest,
 *   !proto.ListVPNResponse>}
 */
const methodDescriptor_Cloud_ListVPNs = new grpc.web.MethodDescriptor(
  '/Cloud/ListVPNs',
  grpc.web.MethodType.UNARY,
  proto.ListVPNRequest,
  proto.ListVPNResponse,
  /**
   * @param {!proto.ListVPNRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListVPNResponse.deserializeBinary
);


/**
 * @param {!proto.ListVPNRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListVPNResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListVPNResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.CloudClient.prototype.listVPNs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Cloud/ListVPNs',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListVPNs,
      callback);
};


/**
 * @param {!proto.ListVPNRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListVPNResponse>}
 *     Promise that resolves to the response
 */
proto.CloudPromiseClient.prototype.listVPNs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Cloud/ListVPNs',
      request,
      metadata || {},
      methodDescriptor_Cloud_ListVPNs);
};


module.exports = proto;

