/**
 * @fileoverview gRPC-Web generated client stub for infra
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: multi-cloud-resource.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var types_pb = require('./types_pb.js')
const proto = {};
proto.infra = require('./multi-cloud-resource_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.infra.CloudProviderServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.infra.CloudProviderServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListAccountsRequest,
 *   !proto.infra.ListAccountsResponse>}
 */
const methodDescriptor_CloudProviderService_ListAccounts = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListAccounts',
  grpc.web.MethodType.UNARY,
  proto.infra.ListAccountsRequest,
  proto.infra.ListAccountsResponse,
  /**
   * @param {!proto.infra.ListAccountsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListAccountsResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListAccountsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListAccountsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListAccountsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listAccounts =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListAccounts',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListAccounts,
      callback);
};


/**
 * @param {!proto.infra.ListAccountsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListAccountsResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listAccounts =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListAccounts',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListAccounts);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListVPCRequest,
 *   !proto.infra.ListVPCResponse>}
 */
const methodDescriptor_CloudProviderService_ListVPC = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListVPC',
  grpc.web.MethodType.UNARY,
  proto.infra.ListVPCRequest,
  proto.infra.ListVPCResponse,
  /**
   * @param {!proto.infra.ListVPCRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListVPCResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListVPCRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListVPCResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListVPCResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listVPC =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListVPC',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListVPC,
      callback);
};


/**
 * @param {!proto.infra.ListVPCRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListVPCResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listVPC =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListVPC',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListVPC);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListInstancesRequest,
 *   !proto.infra.ListInstancesResponse>}
 */
const methodDescriptor_CloudProviderService_ListInstances = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListInstances',
  grpc.web.MethodType.UNARY,
  proto.infra.ListInstancesRequest,
  proto.infra.ListInstancesResponse,
  /**
   * @param {!proto.infra.ListInstancesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListInstancesResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListInstancesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListInstancesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListInstancesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listInstances =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListInstances',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListInstances,
      callback);
};


/**
 * @param {!proto.infra.ListInstancesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListInstancesResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listInstances =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListInstances',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListInstances);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.GetSubnetRequest,
 *   !proto.infra.GetSubnetResponse>}
 */
const methodDescriptor_CloudProviderService_GetSubnet = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/GetSubnet',
  grpc.web.MethodType.UNARY,
  proto.infra.GetSubnetRequest,
  proto.infra.GetSubnetResponse,
  /**
   * @param {!proto.infra.GetSubnetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.GetSubnetResponse.deserializeBinary
);


/**
 * @param {!proto.infra.GetSubnetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.GetSubnetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.GetSubnetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.getSubnet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/GetSubnet',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_GetSubnet,
      callback);
};


/**
 * @param {!proto.infra.GetSubnetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.GetSubnetResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.getSubnet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/GetSubnet',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_GetSubnet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListSubnetsRequest,
 *   !proto.infra.ListSubnetsResponse>}
 */
const methodDescriptor_CloudProviderService_ListSubnets = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListSubnets',
  grpc.web.MethodType.UNARY,
  proto.infra.ListSubnetsRequest,
  proto.infra.ListSubnetsResponse,
  /**
   * @param {!proto.infra.ListSubnetsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListSubnetsResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListSubnetsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListSubnetsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListSubnetsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listSubnets =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListSubnets',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListSubnets,
      callback);
};


/**
 * @param {!proto.infra.ListSubnetsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListSubnetsResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listSubnets =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListSubnets',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListSubnets);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListACLsRequest,
 *   !proto.infra.ListACLsResponse>}
 */
const methodDescriptor_CloudProviderService_ListACLs = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListACLs',
  grpc.web.MethodType.UNARY,
  proto.infra.ListACLsRequest,
  proto.infra.ListACLsResponse,
  /**
   * @param {!proto.infra.ListACLsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListACLsResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListACLsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListACLsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListACLsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listACLs =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListACLs',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListACLs,
      callback);
};


/**
 * @param {!proto.infra.ListACLsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListACLsResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listACLs =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListACLs',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListACLs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListSecurityGroupsRequest,
 *   !proto.infra.ListSecurityGroupsResponse>}
 */
const methodDescriptor_CloudProviderService_ListSecurityGroups = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListSecurityGroups',
  grpc.web.MethodType.UNARY,
  proto.infra.ListSecurityGroupsRequest,
  proto.infra.ListSecurityGroupsResponse,
  /**
   * @param {!proto.infra.ListSecurityGroupsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListSecurityGroupsResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListSecurityGroupsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListSecurityGroupsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListSecurityGroupsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listSecurityGroups =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListSecurityGroups',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListSecurityGroups,
      callback);
};


/**
 * @param {!proto.infra.ListSecurityGroupsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListSecurityGroupsResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listSecurityGroups =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListSecurityGroups',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListSecurityGroups);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListRouteTablesRequest,
 *   !proto.infra.ListRouteTablesResponse>}
 */
const methodDescriptor_CloudProviderService_ListRouteTables = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListRouteTables',
  grpc.web.MethodType.UNARY,
  proto.infra.ListRouteTablesRequest,
  proto.infra.ListRouteTablesResponse,
  /**
   * @param {!proto.infra.ListRouteTablesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListRouteTablesResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListRouteTablesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListRouteTablesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListRouteTablesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listRouteTables =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListRouteTables',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListRouteTables,
      callback);
};


/**
 * @param {!proto.infra.ListRouteTablesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListRouteTablesResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listRouteTables =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListRouteTables',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListRouteTables);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListNATGatewaysRequest,
 *   !proto.infra.ListNATGatewaysResponse>}
 */
const methodDescriptor_CloudProviderService_ListNATGateways = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListNATGateways',
  grpc.web.MethodType.UNARY,
  proto.infra.ListNATGatewaysRequest,
  proto.infra.ListNATGatewaysResponse,
  /**
   * @param {!proto.infra.ListNATGatewaysRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListNATGatewaysResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListNATGatewaysRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListNATGatewaysResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListNATGatewaysResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listNATGateways =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListNATGateways',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListNATGateways,
      callback);
};


/**
 * @param {!proto.infra.ListNATGatewaysRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListNATGatewaysResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listNATGateways =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListNATGateways',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListNATGateways);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListRoutersRequest,
 *   !proto.infra.ListRoutersResponse>}
 */
const methodDescriptor_CloudProviderService_ListRouters = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListRouters',
  grpc.web.MethodType.UNARY,
  proto.infra.ListRoutersRequest,
  proto.infra.ListRoutersResponse,
  /**
   * @param {!proto.infra.ListRoutersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListRoutersResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListRoutersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListRoutersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListRoutersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listRouters =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListRouters',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListRouters,
      callback);
};


/**
 * @param {!proto.infra.ListRoutersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListRoutersResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listRouters =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListRouters',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListRouters);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.infra.ListInternetGatewaysRequest,
 *   !proto.infra.ListInternetGatewaysResponse>}
 */
const methodDescriptor_CloudProviderService_ListInternetGateways = new grpc.web.MethodDescriptor(
  '/infra.CloudProviderService/ListInternetGateways',
  grpc.web.MethodType.UNARY,
  proto.infra.ListInternetGatewaysRequest,
  proto.infra.ListInternetGatewaysResponse,
  /**
   * @param {!proto.infra.ListInternetGatewaysRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.infra.ListInternetGatewaysResponse.deserializeBinary
);


/**
 * @param {!proto.infra.ListInternetGatewaysRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.infra.ListInternetGatewaysResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.infra.ListInternetGatewaysResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.infra.CloudProviderServiceClient.prototype.listInternetGateways =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/infra.CloudProviderService/ListInternetGateways',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListInternetGateways,
      callback);
};


/**
 * @param {!proto.infra.ListInternetGatewaysRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.infra.ListInternetGatewaysResponse>}
 *     Promise that resolves to the response
 */
proto.infra.CloudProviderServicePromiseClient.prototype.listInternetGateways =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/infra.CloudProviderService/ListInternetGateways',
      request,
      metadata || {},
      methodDescriptor_CloudProviderService_ListInternetGateways);
};


module.exports = proto.infra;

