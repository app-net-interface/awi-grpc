// source: network_domain_connection.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var network_domain_pb = require('./network_domain_pb.js');
goog.object.extend(proto, network_domain_pb);
goog.exportSymbol('proto.ConnectionInformation', null, global);
goog.exportSymbol('proto.ConnectionMetadata', null, global);
goog.exportSymbol('proto.ConnectionRequest', null, global);
goog.exportSymbol('proto.ConnectionResponse', null, global);
goog.exportSymbol('proto.ConnectionStatusRequest', null, global);
goog.exportSymbol('proto.ConnectionStatusResponse', null, global);
goog.exportSymbol('proto.DisconnectRequest', null, global);
goog.exportSymbol('proto.DisconnectResponse', null, global);
goog.exportSymbol('proto.GetConnectionRequest', null, global);
goog.exportSymbol('proto.ListConnectionsRequest', null, global);
goog.exportSymbol('proto.ListConnectionsResponse', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.AccessPolicySelector', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.CostPolicySelector', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.Destination', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.InspectionPolicySelector', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.MatchId', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.MatchName', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.MatchSite', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.Metadata', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.NetworkDomain', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.NetworkPolicySelector', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.SecurityPolicySelector', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.Selector', null, global);
goog.exportSymbol('proto.NetworkDomainConnectionConfig.Source', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectionRequest.displayName = 'proto.ConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectionResponse.displayName = 'proto.ConnectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.displayName = 'proto.NetworkDomainConnectionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.Source = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.Source, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.Source.displayName = 'proto.NetworkDomainConnectionConfig.Source';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.Destination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.Destination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.Destination.displayName = 'proto.NetworkDomainConnectionConfig.Destination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.Metadata.displayName = 'proto.NetworkDomainConnectionConfig.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.NetworkDomain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.NetworkDomain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.NetworkDomain.displayName = 'proto.NetworkDomainConnectionConfig.NetworkDomain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.NetworkPolicySelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.NetworkPolicySelector.displayName = 'proto.NetworkDomainConnectionConfig.NetworkPolicySelector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.SecurityPolicySelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.SecurityPolicySelector.displayName = 'proto.NetworkDomainConnectionConfig.SecurityPolicySelector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.displayName = 'proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.CostPolicySelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.CostPolicySelector.displayName = 'proto.NetworkDomainConnectionConfig.CostPolicySelector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.InspectionPolicySelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.InspectionPolicySelector.displayName = 'proto.NetworkDomainConnectionConfig.InspectionPolicySelector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.displayName = 'proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.AccessPolicySelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.AccessPolicySelector.displayName = 'proto.NetworkDomainConnectionConfig.AccessPolicySelector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.Selector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.Selector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.Selector.displayName = 'proto.NetworkDomainConnectionConfig.Selector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.MatchName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.MatchName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.MatchName.displayName = 'proto.NetworkDomainConnectionConfig.MatchName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.MatchId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.MatchId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.MatchId.displayName = 'proto.NetworkDomainConnectionConfig.MatchId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkDomainConnectionConfig.MatchSite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkDomainConnectionConfig.MatchSite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkDomainConnectionConfig.MatchSite.displayName = 'proto.NetworkDomainConnectionConfig.MatchSite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectionMetadata.displayName = 'proto.ConnectionMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DisconnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DisconnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DisconnectRequest.displayName = 'proto.DisconnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DisconnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DisconnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DisconnectResponse.displayName = 'proto.DisconnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetConnectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetConnectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetConnectionRequest.displayName = 'proto.GetConnectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListConnectionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListConnectionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListConnectionsRequest.displayName = 'proto.ListConnectionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListConnectionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListConnectionsResponse.repeatedFields_, null);
};
goog.inherits(proto.ListConnectionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListConnectionsResponse.displayName = 'proto.ListConnectionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectionStatusRequest.displayName = 'proto.ConnectionStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectionStatusResponse.displayName = 'proto.ConnectionStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ConnectionInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ConnectionInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ConnectionInformation.displayName = 'proto.ConnectionInformation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.ConnectionMetadata.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && proto.NetworkDomainConnectionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionRequest}
 */
proto.ConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectionRequest;
  return proto.ConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionRequest}
 */
proto.ConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConnectionMetadata;
      reader.readMessage(value,proto.ConnectionMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.NetworkDomainConnectionConfig;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ConnectionMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkDomainConnectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConnectionMetadata metadata = 1;
 * @return {?proto.ConnectionMetadata}
 */
proto.ConnectionRequest.prototype.getMetadata = function() {
  return /** @type{?proto.ConnectionMetadata} */ (
    jspb.Message.getWrapperField(this, proto.ConnectionMetadata, 1));
};


/**
 * @param {?proto.ConnectionMetadata|undefined} value
 * @return {!proto.ConnectionRequest} returns this
*/
proto.ConnectionRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectionRequest} returns this
 */
proto.ConnectionRequest.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectionRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NetworkDomainConnectionConfig spec = 2;
 * @return {?proto.NetworkDomainConnectionConfig}
 */
proto.ConnectionRequest.prototype.getSpec = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig, 2));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig|undefined} value
 * @return {!proto.ConnectionRequest} returns this
*/
proto.ConnectionRequest.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectionRequest} returns this
 */
proto.ConnectionRequest.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectionRequest.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionResponse}
 */
proto.ConnectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectionResponse;
  return proto.ConnectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionResponse}
 */
proto.ConnectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 4:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.ConnectionResponse.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectionResponse} returns this
 */
proto.ConnectionResponse.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Status status = 4;
 * @return {!proto.Status}
 */
proto.ConnectionResponse.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.ConnectionResponse} returns this
 */
proto.ConnectionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.NetworkDomainConnectionConfig.Source.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && proto.NetworkDomainConnectionConfig.Destination.toObject(includeInstance, f),
    networkpolicy: (f = msg.getNetworkpolicy()) && proto.NetworkDomainConnectionConfig.NetworkPolicySelector.toObject(includeInstance, f),
    securitypolicy: (f = msg.getSecuritypolicy()) && proto.NetworkDomainConnectionConfig.SecurityPolicySelector.toObject(includeInstance, f),
    inspectionpolicy: (f = msg.getInspectionpolicy()) && proto.NetworkDomainConnectionConfig.InspectionPolicySelector.toObject(includeInstance, f),
    appconnectionpolicy: (f = msg.getAppconnectionpolicy()) && proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.toObject(includeInstance, f),
    observabilitypolicy: (f = msg.getObservabilitypolicy()) && proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.toObject(includeInstance, f),
    costpolicy: (f = msg.getCostpolicy()) && proto.NetworkDomainConnectionConfig.CostPolicySelector.toObject(includeInstance, f),
    accesspolicy: (f = msg.getAccesspolicy()) && proto.NetworkDomainConnectionConfig.AccessPolicySelector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig}
 */
proto.NetworkDomainConnectionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig;
  return proto.NetworkDomainConnectionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig}
 */
proto.NetworkDomainConnectionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Source;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Source.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.NetworkDomainConnectionConfig.Destination;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 3:
      var value = new proto.NetworkDomainConnectionConfig.NetworkPolicySelector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.NetworkPolicySelector.deserializeBinaryFromReader);
      msg.setNetworkpolicy(value);
      break;
    case 4:
      var value = new proto.NetworkDomainConnectionConfig.SecurityPolicySelector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.SecurityPolicySelector.deserializeBinaryFromReader);
      msg.setSecuritypolicy(value);
      break;
    case 5:
      var value = new proto.NetworkDomainConnectionConfig.InspectionPolicySelector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.InspectionPolicySelector.deserializeBinaryFromReader);
      msg.setInspectionpolicy(value);
      break;
    case 6:
      var value = new proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.deserializeBinaryFromReader);
      msg.setAppconnectionpolicy(value);
      break;
    case 7:
      var value = new proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.deserializeBinaryFromReader);
      msg.setObservabilitypolicy(value);
      break;
    case 8:
      var value = new proto.NetworkDomainConnectionConfig.CostPolicySelector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.CostPolicySelector.deserializeBinaryFromReader);
      msg.setCostpolicy(value);
      break;
    case 9:
      var value = new proto.NetworkDomainConnectionConfig.AccessPolicySelector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.AccessPolicySelector.deserializeBinaryFromReader);
      msg.setAccesspolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Source.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkDomainConnectionConfig.Destination.serializeBinaryToWriter
    );
  }
  f = message.getNetworkpolicy();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.NetworkDomainConnectionConfig.NetworkPolicySelector.serializeBinaryToWriter
    );
  }
  f = message.getSecuritypolicy();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.NetworkDomainConnectionConfig.SecurityPolicySelector.serializeBinaryToWriter
    );
  }
  f = message.getInspectionpolicy();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.NetworkDomainConnectionConfig.InspectionPolicySelector.serializeBinaryToWriter
    );
  }
  f = message.getAppconnectionpolicy();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.serializeBinaryToWriter
    );
  }
  f = message.getObservabilitypolicy();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.serializeBinaryToWriter
    );
  }
  f = message.getCostpolicy();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.NetworkDomainConnectionConfig.CostPolicySelector.serializeBinaryToWriter
    );
  }
  f = message.getAccesspolicy();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.NetworkDomainConnectionConfig.AccessPolicySelector.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.Source.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.Source.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.Source} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.Source.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.NetworkDomainConnectionConfig.Metadata.toObject(includeInstance, f),
    networkdomain: (f = msg.getNetworkdomain()) && proto.NetworkDomainConnectionConfig.NetworkDomain.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.Source}
 */
proto.NetworkDomainConnectionConfig.Source.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.Source;
  return proto.NetworkDomainConnectionConfig.Source.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.Source}
 */
proto.NetworkDomainConnectionConfig.Source.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Metadata;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.NetworkDomainConnectionConfig.NetworkDomain;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.NetworkDomain.deserializeBinaryFromReader);
      msg.setNetworkdomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.Source.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.Source.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.Source.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getNetworkdomain();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkDomainConnectionConfig.NetworkDomain.serializeBinaryToWriter
    );
  }
};


/**
 * optional Metadata metadata = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Metadata}
 */
proto.NetworkDomainConnectionConfig.Source.prototype.getMetadata = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Metadata, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Metadata|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.Source} returns this
*/
proto.NetworkDomainConnectionConfig.Source.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.Source} returns this
 */
proto.NetworkDomainConnectionConfig.Source.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.Source.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NetworkDomain networkDomain = 2;
 * @return {?proto.NetworkDomainConnectionConfig.NetworkDomain}
 */
proto.NetworkDomainConnectionConfig.Source.prototype.getNetworkdomain = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.NetworkDomain} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.NetworkDomain, 2));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.NetworkDomain|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.Source} returns this
*/
proto.NetworkDomainConnectionConfig.Source.prototype.setNetworkdomain = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.Source} returns this
 */
proto.NetworkDomainConnectionConfig.Source.prototype.clearNetworkdomain = function() {
  return this.setNetworkdomain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.Source.prototype.hasNetworkdomain = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.Destination.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.Destination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.Destination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.Destination.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.NetworkDomainConnectionConfig.Metadata.toObject(includeInstance, f),
    networkdomain: (f = msg.getNetworkdomain()) && proto.NetworkDomainConnectionConfig.NetworkDomain.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.Destination}
 */
proto.NetworkDomainConnectionConfig.Destination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.Destination;
  return proto.NetworkDomainConnectionConfig.Destination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.Destination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.Destination}
 */
proto.NetworkDomainConnectionConfig.Destination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Metadata;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.NetworkDomainConnectionConfig.NetworkDomain;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.NetworkDomain.deserializeBinaryFromReader);
      msg.setNetworkdomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.Destination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.Destination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.Destination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.Destination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getNetworkdomain();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkDomainConnectionConfig.NetworkDomain.serializeBinaryToWriter
    );
  }
};


/**
 * optional Metadata metadata = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Metadata}
 */
proto.NetworkDomainConnectionConfig.Destination.prototype.getMetadata = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Metadata, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Metadata|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.Destination} returns this
*/
proto.NetworkDomainConnectionConfig.Destination.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.Destination} returns this
 */
proto.NetworkDomainConnectionConfig.Destination.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.Destination.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NetworkDomain networkDomain = 2;
 * @return {?proto.NetworkDomainConnectionConfig.NetworkDomain}
 */
proto.NetworkDomainConnectionConfig.Destination.prototype.getNetworkdomain = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.NetworkDomain} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.NetworkDomain, 2));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.NetworkDomain|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.Destination} returns this
*/
proto.NetworkDomainConnectionConfig.Destination.prototype.setNetworkdomain = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.Destination} returns this
 */
proto.NetworkDomainConnectionConfig.Destination.prototype.clearNetworkdomain = function() {
  return this.setNetworkdomain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.Destination.prototype.hasNetworkdomain = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.Metadata}
 */
proto.NetworkDomainConnectionConfig.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.Metadata;
  return proto.NetworkDomainConnectionConfig.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.Metadata}
 */
proto.NetworkDomainConnectionConfig.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.NetworkDomainConnectionConfig.Metadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NetworkDomainConnectionConfig.Metadata} returns this
 */
proto.NetworkDomainConnectionConfig.Metadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.NetworkDomainConnectionConfig.Metadata.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NetworkDomainConnectionConfig.Metadata} returns this
 */
proto.NetworkDomainConnectionConfig.Metadata.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.NetworkDomain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.NetworkDomain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: (f = msg.getSelector()) && proto.NetworkDomainConnectionConfig.Selector.toObject(includeInstance, f),
    accountid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.NetworkDomain}
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.NetworkDomain;
  return proto.NetworkDomainConnectionConfig.NetworkDomain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.NetworkDomain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.NetworkDomain}
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Selector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.NetworkDomain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.NetworkDomain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter
    );
  }
  f = message.getAccountid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Selector selector = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.prototype.getSelector = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Selector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Selector, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Selector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.NetworkDomain} returns this
*/
proto.NetworkDomainConnectionConfig.NetworkDomain.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.NetworkDomain} returns this
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string accountID = 2;
 * @return {string}
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.prototype.getAccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NetworkDomainConnectionConfig.NetworkDomain} returns this
 */
proto.NetworkDomainConnectionConfig.NetworkDomain.prototype.setAccountid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.NetworkPolicySelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.NetworkPolicySelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: (f = msg.getSelector()) && proto.NetworkDomainConnectionConfig.Selector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.NetworkPolicySelector}
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.NetworkPolicySelector;
  return proto.NetworkDomainConnectionConfig.NetworkPolicySelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.NetworkPolicySelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.NetworkPolicySelector}
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Selector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.NetworkPolicySelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.NetworkPolicySelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter
    );
  }
};


/**
 * optional Selector selector = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.prototype.getSelector = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Selector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Selector, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Selector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.NetworkPolicySelector} returns this
*/
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.NetworkPolicySelector} returns this
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.NetworkPolicySelector.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.SecurityPolicySelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.SecurityPolicySelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: (f = msg.getSelector()) && proto.NetworkDomainConnectionConfig.Selector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.SecurityPolicySelector}
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.SecurityPolicySelector;
  return proto.NetworkDomainConnectionConfig.SecurityPolicySelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.SecurityPolicySelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.SecurityPolicySelector}
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Selector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.SecurityPolicySelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.SecurityPolicySelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter
    );
  }
};


/**
 * optional Selector selector = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.prototype.getSelector = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Selector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Selector, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Selector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.SecurityPolicySelector} returns this
*/
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.SecurityPolicySelector} returns this
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.SecurityPolicySelector.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: (f = msg.getSelector()) && proto.NetworkDomainConnectionConfig.Selector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector}
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector;
  return proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector}
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Selector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter
    );
  }
};


/**
 * optional Selector selector = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.prototype.getSelector = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Selector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Selector, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Selector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector} returns this
*/
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector} returns this
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.CostPolicySelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.CostPolicySelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: (f = msg.getSelector()) && proto.NetworkDomainConnectionConfig.Selector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.CostPolicySelector}
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.CostPolicySelector;
  return proto.NetworkDomainConnectionConfig.CostPolicySelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.CostPolicySelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.CostPolicySelector}
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Selector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.CostPolicySelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.CostPolicySelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter
    );
  }
};


/**
 * optional Selector selector = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.prototype.getSelector = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Selector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Selector, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Selector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.CostPolicySelector} returns this
*/
proto.NetworkDomainConnectionConfig.CostPolicySelector.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.CostPolicySelector} returns this
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.CostPolicySelector.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.InspectionPolicySelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.InspectionPolicySelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: (f = msg.getSelector()) && proto.NetworkDomainConnectionConfig.Selector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.InspectionPolicySelector}
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.InspectionPolicySelector;
  return proto.NetworkDomainConnectionConfig.InspectionPolicySelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.InspectionPolicySelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.InspectionPolicySelector}
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Selector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.InspectionPolicySelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.InspectionPolicySelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter
    );
  }
};


/**
 * optional Selector selector = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.prototype.getSelector = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Selector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Selector, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Selector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.InspectionPolicySelector} returns this
*/
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.InspectionPolicySelector} returns this
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.InspectionPolicySelector.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: (f = msg.getSelector()) && proto.NetworkDomainConnectionConfig.Selector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector}
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector;
  return proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector}
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Selector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter
    );
  }
};


/**
 * optional Selector selector = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.prototype.getSelector = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Selector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Selector, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Selector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector} returns this
*/
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector} returns this
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.AccessPolicySelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.AccessPolicySelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: (f = msg.getSelector()) && proto.NetworkDomainConnectionConfig.Selector.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.AccessPolicySelector}
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.AccessPolicySelector;
  return proto.NetworkDomainConnectionConfig.AccessPolicySelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.AccessPolicySelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.AccessPolicySelector}
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.Selector;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader);
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.AccessPolicySelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.AccessPolicySelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter
    );
  }
};


/**
 * optional Selector selector = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.prototype.getSelector = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Selector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Selector, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Selector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.AccessPolicySelector} returns this
*/
proto.NetworkDomainConnectionConfig.AccessPolicySelector.prototype.setSelector = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.AccessPolicySelector} returns this
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.prototype.clearSelector = function() {
  return this.setSelector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.AccessPolicySelector.prototype.hasSelector = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.Selector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.Selector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.Selector.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchname: (f = msg.getMatchname()) && proto.NetworkDomainConnectionConfig.MatchName.toObject(includeInstance, f),
    matchid: (f = msg.getMatchid()) && proto.NetworkDomainConnectionConfig.MatchId.toObject(includeInstance, f),
    matchlabelsMap: (f = msg.getMatchlabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    matchsite: (f = msg.getMatchsite()) && proto.NetworkDomainConnectionConfig.MatchSite.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.Selector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.Selector;
  return proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.Selector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.Selector}
 */
proto.NetworkDomainConnectionConfig.Selector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NetworkDomainConnectionConfig.MatchName;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.MatchName.deserializeBinaryFromReader);
      msg.setMatchname(value);
      break;
    case 2:
      var value = new proto.NetworkDomainConnectionConfig.MatchId;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.MatchId.deserializeBinaryFromReader);
      msg.setMatchid(value);
      break;
    case 3:
      var value = msg.getMatchlabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = new proto.NetworkDomainConnectionConfig.MatchSite;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.MatchSite.deserializeBinaryFromReader);
      msg.setMatchsite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.Selector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.Selector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchname();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NetworkDomainConnectionConfig.MatchName.serializeBinaryToWriter
    );
  }
  f = message.getMatchid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkDomainConnectionConfig.MatchId.serializeBinaryToWriter
    );
  }
  f = message.getMatchlabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMatchsite();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.NetworkDomainConnectionConfig.MatchSite.serializeBinaryToWriter
    );
  }
};


/**
 * optional MatchName matchName = 1;
 * @return {?proto.NetworkDomainConnectionConfig.MatchName}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.getMatchname = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.MatchName} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.MatchName, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.MatchName|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.Selector} returns this
*/
proto.NetworkDomainConnectionConfig.Selector.prototype.setMatchname = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.Selector} returns this
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.clearMatchname = function() {
  return this.setMatchname(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.hasMatchname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MatchId matchId = 2;
 * @return {?proto.NetworkDomainConnectionConfig.MatchId}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.getMatchid = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.MatchId} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.MatchId, 2));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.MatchId|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.Selector} returns this
*/
proto.NetworkDomainConnectionConfig.Selector.prototype.setMatchid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.Selector} returns this
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.clearMatchid = function() {
  return this.setMatchid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.hasMatchid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> matchLabels = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.getMatchlabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.NetworkDomainConnectionConfig.Selector} returns this
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.clearMatchlabelsMap = function() {
  this.getMatchlabelsMap().clear();
  return this;};


/**
 * optional MatchSite matchSite = 4;
 * @return {?proto.NetworkDomainConnectionConfig.MatchSite}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.getMatchsite = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.MatchSite} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.MatchSite, 4));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.MatchSite|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig.Selector} returns this
*/
proto.NetworkDomainConnectionConfig.Selector.prototype.setMatchsite = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig.Selector} returns this
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.clearMatchsite = function() {
  return this.setMatchsite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.Selector.prototype.hasMatchsite = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.MatchName.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.MatchName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.MatchName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.MatchName.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.MatchName}
 */
proto.NetworkDomainConnectionConfig.MatchName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.MatchName;
  return proto.NetworkDomainConnectionConfig.MatchName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.MatchName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.MatchName}
 */
proto.NetworkDomainConnectionConfig.MatchName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.MatchName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.MatchName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.MatchName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.MatchName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.NetworkDomainConnectionConfig.MatchName.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NetworkDomainConnectionConfig.MatchName} returns this
 */
proto.NetworkDomainConnectionConfig.MatchName.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.MatchId.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.MatchId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.MatchId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.MatchId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.MatchId}
 */
proto.NetworkDomainConnectionConfig.MatchId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.MatchId;
  return proto.NetworkDomainConnectionConfig.MatchId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.MatchId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.MatchId}
 */
proto.NetworkDomainConnectionConfig.MatchId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.MatchId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.MatchId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.MatchId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.MatchId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.NetworkDomainConnectionConfig.MatchId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NetworkDomainConnectionConfig.MatchId} returns this
 */
proto.NetworkDomainConnectionConfig.MatchId.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkDomainConnectionConfig.MatchSite.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkDomainConnectionConfig.MatchSite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkDomainConnectionConfig.MatchSite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.MatchSite.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkDomainConnectionConfig.MatchSite}
 */
proto.NetworkDomainConnectionConfig.MatchSite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkDomainConnectionConfig.MatchSite;
  return proto.NetworkDomainConnectionConfig.MatchSite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkDomainConnectionConfig.MatchSite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkDomainConnectionConfig.MatchSite}
 */
proto.NetworkDomainConnectionConfig.MatchSite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkDomainConnectionConfig.MatchSite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkDomainConnectionConfig.MatchSite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkDomainConnectionConfig.MatchSite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkDomainConnectionConfig.MatchSite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.NetworkDomainConnectionConfig.MatchSite.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NetworkDomainConnectionConfig.MatchSite} returns this
 */
proto.NetworkDomainConnectionConfig.MatchSite.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Source source = 1;
 * @return {?proto.NetworkDomainConnectionConfig.Source}
 */
proto.NetworkDomainConnectionConfig.prototype.getSource = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Source} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Source, 1));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Source|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Destination destination = 2;
 * @return {?proto.NetworkDomainConnectionConfig.Destination}
 */
proto.NetworkDomainConnectionConfig.prototype.getDestination = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.Destination} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.Destination, 2));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.Destination|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setDestination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NetworkPolicySelector networkPolicy = 3;
 * @return {?proto.NetworkDomainConnectionConfig.NetworkPolicySelector}
 */
proto.NetworkDomainConnectionConfig.prototype.getNetworkpolicy = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.NetworkPolicySelector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.NetworkPolicySelector, 3));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.NetworkPolicySelector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setNetworkpolicy = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearNetworkpolicy = function() {
  return this.setNetworkpolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasNetworkpolicy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SecurityPolicySelector securityPolicy = 4;
 * @return {?proto.NetworkDomainConnectionConfig.SecurityPolicySelector}
 */
proto.NetworkDomainConnectionConfig.prototype.getSecuritypolicy = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.SecurityPolicySelector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.SecurityPolicySelector, 4));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.SecurityPolicySelector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setSecuritypolicy = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearSecuritypolicy = function() {
  return this.setSecuritypolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasSecuritypolicy = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InspectionPolicySelector inspectionPolicy = 5;
 * @return {?proto.NetworkDomainConnectionConfig.InspectionPolicySelector}
 */
proto.NetworkDomainConnectionConfig.prototype.getInspectionpolicy = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.InspectionPolicySelector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.InspectionPolicySelector, 5));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.InspectionPolicySelector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setInspectionpolicy = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearInspectionpolicy = function() {
  return this.setInspectionpolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasInspectionpolicy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AppConnectionPolicySelector appConnectionPolicy = 6;
 * @return {?proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector}
 */
proto.NetworkDomainConnectionConfig.prototype.getAppconnectionpolicy = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector, 6));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.AppConnectionPolicySelector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setAppconnectionpolicy = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearAppconnectionpolicy = function() {
  return this.setAppconnectionpolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasAppconnectionpolicy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ObservabilityPolicySelector observabilityPolicy = 7;
 * @return {?proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector}
 */
proto.NetworkDomainConnectionConfig.prototype.getObservabilitypolicy = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector, 7));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.ObservabilityPolicySelector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setObservabilitypolicy = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearObservabilitypolicy = function() {
  return this.setObservabilitypolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasObservabilitypolicy = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CostPolicySelector costPolicy = 8;
 * @return {?proto.NetworkDomainConnectionConfig.CostPolicySelector}
 */
proto.NetworkDomainConnectionConfig.prototype.getCostpolicy = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.CostPolicySelector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.CostPolicySelector, 8));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.CostPolicySelector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setCostpolicy = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearCostpolicy = function() {
  return this.setCostpolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasCostpolicy = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AccessPolicySelector accessPolicy = 9;
 * @return {?proto.NetworkDomainConnectionConfig.AccessPolicySelector}
 */
proto.NetworkDomainConnectionConfig.prototype.getAccesspolicy = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig.AccessPolicySelector} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig.AccessPolicySelector, 9));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig.AccessPolicySelector|undefined} value
 * @return {!proto.NetworkDomainConnectionConfig} returns this
*/
proto.NetworkDomainConnectionConfig.prototype.setAccesspolicy = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NetworkDomainConnectionConfig} returns this
 */
proto.NetworkDomainConnectionConfig.prototype.clearAccesspolicy = function() {
  return this.setAccesspolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NetworkDomainConnectionConfig.prototype.hasAccesspolicy = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectionMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectionMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectionMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionMetadata}
 */
proto.ConnectionMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectionMetadata;
  return proto.ConnectionMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionMetadata}
 */
proto.ConnectionMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectionMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ConnectionMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectionMetadata} returns this
 */
proto.ConnectionMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.ConnectionMetadata.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectionMetadata} returns this
 */
proto.ConnectionMetadata.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> labels = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ConnectionMetadata.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ConnectionMetadata} returns this
 */
proto.ConnectionMetadata.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DisconnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DisconnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DisconnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DisconnectRequest}
 */
proto.DisconnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DisconnectRequest;
  return proto.DisconnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DisconnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DisconnectRequest}
 */
proto.DisconnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DisconnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DisconnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DisconnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.DisconnectRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DisconnectRequest} returns this
 */
proto.DisconnectRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DisconnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DisconnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DisconnectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DisconnectResponse}
 */
proto.DisconnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DisconnectResponse;
  return proto.DisconnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DisconnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DisconnectResponse}
 */
proto.DisconnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionName(value);
      break;
    case 3:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DisconnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DisconnectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DisconnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DisconnectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.DisconnectResponse.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DisconnectResponse} returns this
 */
proto.DisconnectResponse.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_name = 2;
 * @return {string}
 */
proto.DisconnectResponse.prototype.getConnectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DisconnectResponse} returns this
 */
proto.DisconnectResponse.prototype.setConnectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Status status = 3;
 * @return {!proto.Status}
 */
proto.DisconnectResponse.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.DisconnectResponse} returns this
 */
proto.DisconnectResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetConnectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetConnectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetConnectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConnectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetConnectionRequest}
 */
proto.GetConnectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetConnectionRequest;
  return proto.GetConnectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetConnectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetConnectionRequest}
 */
proto.GetConnectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetConnectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetConnectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetConnectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetConnectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.GetConnectionRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetConnectionRequest} returns this
 */
proto.GetConnectionRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListConnectionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ListConnectionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListConnectionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListConnectionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListConnectionsRequest}
 */
proto.ListConnectionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListConnectionsRequest;
  return proto.ListConnectionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListConnectionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListConnectionsRequest}
 */
proto.ListConnectionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListConnectionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListConnectionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListConnectionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListConnectionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListConnectionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListConnectionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ListConnectionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListConnectionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListConnectionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionsList: jspb.Message.toObjectList(msg.getConnectionsList(),
    proto.ConnectionInformation.toObject, includeInstance),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListConnectionsResponse}
 */
proto.ListConnectionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListConnectionsResponse;
  return proto.ListConnectionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListConnectionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListConnectionsResponse}
 */
proto.ListConnectionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ConnectionInformation;
      reader.readMessage(value,proto.ConnectionInformation.deserializeBinaryFromReader);
      msg.addConnections(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListConnectionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListConnectionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListConnectionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListConnectionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ConnectionInformation.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConnectionInformation connections = 1;
 * @return {!Array<!proto.ConnectionInformation>}
 */
proto.ListConnectionsResponse.prototype.getConnectionsList = function() {
  return /** @type{!Array<!proto.ConnectionInformation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ConnectionInformation, 1));
};


/**
 * @param {!Array<!proto.ConnectionInformation>} value
 * @return {!proto.ListConnectionsResponse} returns this
*/
proto.ListConnectionsResponse.prototype.setConnectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ConnectionInformation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ConnectionInformation}
 */
proto.ListConnectionsResponse.prototype.addConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ConnectionInformation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ListConnectionsResponse} returns this
 */
proto.ListConnectionsResponse.prototype.clearConnectionsList = function() {
  return this.setConnectionsList([]);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.ListConnectionsResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.ListConnectionsResponse} returns this
*/
proto.ListConnectionsResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ListConnectionsResponse} returns this
 */
proto.ListConnectionsResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ListConnectionsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectionStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectionStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectionStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionStatusRequest}
 */
proto.ConnectionStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectionStatusRequest;
  return proto.ConnectionStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionStatusRequest}
 */
proto.ConnectionStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectionStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.ConnectionStatusRequest.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectionStatusRequest} returns this
 */
proto.ConnectionStatusRequest.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectionStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectionStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectionStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && common_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionStatusResponse}
 */
proto.ConnectionStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectionStatusResponse;
  return proto.ConnectionStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionStatusResponse}
 */
proto.ConnectionStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setConnectionStatus(value);
      break;
    case 2:
      var value = new common_pb.Error;
      reader.readMessage(value,common_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectionStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status connection_status = 1;
 * @return {!proto.Status}
 */
proto.ConnectionStatusResponse.prototype.getConnectionStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.ConnectionStatusResponse} returns this
 */
proto.ConnectionStatusResponse.prototype.setConnectionStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.ConnectionStatusResponse.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, common_pb.Error, 2));
};


/**
 * @param {?proto.Error|undefined} value
 * @return {!proto.ConnectionStatusResponse} returns this
*/
proto.ConnectionStatusResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectionStatusResponse} returns this
 */
proto.ConnectionStatusResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectionStatusResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ConnectionInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.ConnectionInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ConnectionInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metadata: (f = msg.getMetadata()) && proto.ConnectionMetadata.toObject(includeInstance, f),
    source: (f = msg.getSource()) && network_domain_pb.NetworkDomainObject.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && network_domain_pb.NetworkDomainObject.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.NetworkDomainConnectionConfig.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    creationtimestamp: jspb.Message.getFieldWithDefault(msg, 7, ""),
    modificationtimestamp: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ConnectionInformation}
 */
proto.ConnectionInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ConnectionInformation;
  return proto.ConnectionInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ConnectionInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ConnectionInformation}
 */
proto.ConnectionInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.ConnectionMetadata;
      reader.readMessage(value,proto.ConnectionMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = new network_domain_pb.NetworkDomainObject;
      reader.readMessage(value,network_domain_pb.NetworkDomainObject.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 4:
      var value = new network_domain_pb.NetworkDomainObject;
      reader.readMessage(value,network_domain_pb.NetworkDomainObject.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 5:
      var value = new proto.NetworkDomainConnectionConfig;
      reader.readMessage(value,proto.NetworkDomainConnectionConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 6:
      var value = /** @type {!proto.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationtimestamp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setModificationtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ConnectionInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ConnectionInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ConnectionInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ConnectionInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ConnectionMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      network_domain_pb.NetworkDomainObject.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      network_domain_pb.NetworkDomainObject.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.NetworkDomainConnectionConfig.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getCreationtimestamp();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getModificationtimestamp();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ConnectionInformation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectionInformation} returns this
 */
proto.ConnectionInformation.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ConnectionMetadata metadata = 2;
 * @return {?proto.ConnectionMetadata}
 */
proto.ConnectionInformation.prototype.getMetadata = function() {
  return /** @type{?proto.ConnectionMetadata} */ (
    jspb.Message.getWrapperField(this, proto.ConnectionMetadata, 2));
};


/**
 * @param {?proto.ConnectionMetadata|undefined} value
 * @return {!proto.ConnectionInformation} returns this
*/
proto.ConnectionInformation.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectionInformation} returns this
 */
proto.ConnectionInformation.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectionInformation.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NetworkDomainObject source = 3;
 * @return {?proto.NetworkDomainObject}
 */
proto.ConnectionInformation.prototype.getSource = function() {
  return /** @type{?proto.NetworkDomainObject} */ (
    jspb.Message.getWrapperField(this, network_domain_pb.NetworkDomainObject, 3));
};


/**
 * @param {?proto.NetworkDomainObject|undefined} value
 * @return {!proto.ConnectionInformation} returns this
*/
proto.ConnectionInformation.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectionInformation} returns this
 */
proto.ConnectionInformation.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectionInformation.prototype.hasSource = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NetworkDomainObject destination = 4;
 * @return {?proto.NetworkDomainObject}
 */
proto.ConnectionInformation.prototype.getDestination = function() {
  return /** @type{?proto.NetworkDomainObject} */ (
    jspb.Message.getWrapperField(this, network_domain_pb.NetworkDomainObject, 4));
};


/**
 * @param {?proto.NetworkDomainObject|undefined} value
 * @return {!proto.ConnectionInformation} returns this
*/
proto.ConnectionInformation.prototype.setDestination = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectionInformation} returns this
 */
proto.ConnectionInformation.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectionInformation.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional NetworkDomainConnectionConfig config = 5;
 * @return {?proto.NetworkDomainConnectionConfig}
 */
proto.ConnectionInformation.prototype.getConfig = function() {
  return /** @type{?proto.NetworkDomainConnectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.NetworkDomainConnectionConfig, 5));
};


/**
 * @param {?proto.NetworkDomainConnectionConfig|undefined} value
 * @return {!proto.ConnectionInformation} returns this
*/
proto.ConnectionInformation.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ConnectionInformation} returns this
 */
proto.ConnectionInformation.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ConnectionInformation.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Status status = 6;
 * @return {!proto.Status}
 */
proto.ConnectionInformation.prototype.getStatus = function() {
  return /** @type {!proto.Status} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.Status} value
 * @return {!proto.ConnectionInformation} returns this
 */
proto.ConnectionInformation.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string creationTimestamp = 7;
 * @return {string}
 */
proto.ConnectionInformation.prototype.getCreationtimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectionInformation} returns this
 */
proto.ConnectionInformation.prototype.setCreationtimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string modificationTimestamp = 8;
 * @return {string}
 */
proto.ConnectionInformation.prototype.getModificationtimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ConnectionInformation} returns this
 */
proto.ConnectionInformation.prototype.setModificationtimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


goog.object.extend(exports, proto);
