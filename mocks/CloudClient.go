// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	awi "github.com/app-net-interface/awi-grpc/pb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CloudClient is an autogenerated mock type for the CloudClient type
type CloudClient struct {
	mock.Mock
}

type CloudClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudClient) EXPECT() *CloudClient_Expecter {
	return &CloudClient_Expecter{mock: &_m.Mock}
}

// ListInstances provides a mock function with given fields: ctx, in, opts
func (_m *CloudClient) ListInstances(ctx context.Context, in *awi.ListInstancesRequest, opts ...grpc.CallOption) (*awi.ListInstancesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.ListInstancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListInstancesRequest, ...grpc.CallOption) (*awi.ListInstancesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListInstancesRequest, ...grpc.CallOption) *awi.ListInstancesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.ListInstancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.ListInstancesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudClient_ListInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstances'
type CloudClient_ListInstances_Call struct {
	*mock.Call
}

// ListInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.ListInstancesRequest
//   - opts ...grpc.CallOption
func (_e *CloudClient_Expecter) ListInstances(ctx interface{}, in interface{}, opts ...interface{}) *CloudClient_ListInstances_Call {
	return &CloudClient_ListInstances_Call{Call: _e.mock.On("ListInstances",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudClient_ListInstances_Call) Run(run func(ctx context.Context, in *awi.ListInstancesRequest, opts ...grpc.CallOption)) *CloudClient_ListInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.ListInstancesRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudClient_ListInstances_Call) Return(_a0 *awi.ListInstancesResponse, _a1 error) *CloudClient_ListInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudClient_ListInstances_Call) RunAndReturn(run func(context.Context, *awi.ListInstancesRequest, ...grpc.CallOption) (*awi.ListInstancesResponse, error)) *CloudClient_ListInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListSites provides a mock function with given fields: ctx, in, opts
func (_m *CloudClient) ListSites(ctx context.Context, in *awi.ListSiteRequest, opts ...grpc.CallOption) (*awi.ListSiteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.ListSiteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListSiteRequest, ...grpc.CallOption) (*awi.ListSiteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListSiteRequest, ...grpc.CallOption) *awi.ListSiteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.ListSiteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.ListSiteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudClient_ListSites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSites'
type CloudClient_ListSites_Call struct {
	*mock.Call
}

// ListSites is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.ListSiteRequest
//   - opts ...grpc.CallOption
func (_e *CloudClient_Expecter) ListSites(ctx interface{}, in interface{}, opts ...interface{}) *CloudClient_ListSites_Call {
	return &CloudClient_ListSites_Call{Call: _e.mock.On("ListSites",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudClient_ListSites_Call) Run(run func(ctx context.Context, in *awi.ListSiteRequest, opts ...grpc.CallOption)) *CloudClient_ListSites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.ListSiteRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudClient_ListSites_Call) Return(_a0 *awi.ListSiteResponse, _a1 error) *CloudClient_ListSites_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudClient_ListSites_Call) RunAndReturn(run func(context.Context, *awi.ListSiteRequest, ...grpc.CallOption) (*awi.ListSiteResponse, error)) *CloudClient_ListSites_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubnets provides a mock function with given fields: ctx, in, opts
func (_m *CloudClient) ListSubnets(ctx context.Context, in *awi.ListSubnetRequest, opts ...grpc.CallOption) (*awi.ListSubnetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.ListSubnetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListSubnetRequest, ...grpc.CallOption) (*awi.ListSubnetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListSubnetRequest, ...grpc.CallOption) *awi.ListSubnetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.ListSubnetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.ListSubnetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudClient_ListSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubnets'
type CloudClient_ListSubnets_Call struct {
	*mock.Call
}

// ListSubnets is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.ListSubnetRequest
//   - opts ...grpc.CallOption
func (_e *CloudClient_Expecter) ListSubnets(ctx interface{}, in interface{}, opts ...interface{}) *CloudClient_ListSubnets_Call {
	return &CloudClient_ListSubnets_Call{Call: _e.mock.On("ListSubnets",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudClient_ListSubnets_Call) Run(run func(ctx context.Context, in *awi.ListSubnetRequest, opts ...grpc.CallOption)) *CloudClient_ListSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.ListSubnetRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudClient_ListSubnets_Call) Return(_a0 *awi.ListSubnetResponse, _a1 error) *CloudClient_ListSubnets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudClient_ListSubnets_Call) RunAndReturn(run func(context.Context, *awi.ListSubnetRequest, ...grpc.CallOption) (*awi.ListSubnetResponse, error)) *CloudClient_ListSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// ListVPCTags provides a mock function with given fields: ctx, in, opts
func (_m *CloudClient) ListVPCTags(ctx context.Context, in *awi.ListVPCTagRequest, opts ...grpc.CallOption) (*awi.ListVPCResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.ListVPCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListVPCTagRequest, ...grpc.CallOption) (*awi.ListVPCResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListVPCTagRequest, ...grpc.CallOption) *awi.ListVPCResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.ListVPCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.ListVPCTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudClient_ListVPCTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVPCTags'
type CloudClient_ListVPCTags_Call struct {
	*mock.Call
}

// ListVPCTags is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.ListVPCTagRequest
//   - opts ...grpc.CallOption
func (_e *CloudClient_Expecter) ListVPCTags(ctx interface{}, in interface{}, opts ...interface{}) *CloudClient_ListVPCTags_Call {
	return &CloudClient_ListVPCTags_Call{Call: _e.mock.On("ListVPCTags",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudClient_ListVPCTags_Call) Run(run func(ctx context.Context, in *awi.ListVPCTagRequest, opts ...grpc.CallOption)) *CloudClient_ListVPCTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.ListVPCTagRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudClient_ListVPCTags_Call) Return(_a0 *awi.ListVPCResponse, _a1 error) *CloudClient_ListVPCTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudClient_ListVPCTags_Call) RunAndReturn(run func(context.Context, *awi.ListVPCTagRequest, ...grpc.CallOption) (*awi.ListVPCResponse, error)) *CloudClient_ListVPCTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListVPCs provides a mock function with given fields: ctx, in, opts
func (_m *CloudClient) ListVPCs(ctx context.Context, in *awi.ListVPCRequest, opts ...grpc.CallOption) (*awi.ListVPCResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.ListVPCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListVPCRequest, ...grpc.CallOption) (*awi.ListVPCResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListVPCRequest, ...grpc.CallOption) *awi.ListVPCResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.ListVPCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.ListVPCRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudClient_ListVPCs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVPCs'
type CloudClient_ListVPCs_Call struct {
	*mock.Call
}

// ListVPCs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.ListVPCRequest
//   - opts ...grpc.CallOption
func (_e *CloudClient_Expecter) ListVPCs(ctx interface{}, in interface{}, opts ...interface{}) *CloudClient_ListVPCs_Call {
	return &CloudClient_ListVPCs_Call{Call: _e.mock.On("ListVPCs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudClient_ListVPCs_Call) Run(run func(ctx context.Context, in *awi.ListVPCRequest, opts ...grpc.CallOption)) *CloudClient_ListVPCs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.ListVPCRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudClient_ListVPCs_Call) Return(_a0 *awi.ListVPCResponse, _a1 error) *CloudClient_ListVPCs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudClient_ListVPCs_Call) RunAndReturn(run func(context.Context, *awi.ListVPCRequest, ...grpc.CallOption) (*awi.ListVPCResponse, error)) *CloudClient_ListVPCs_Call {
	_c.Call.Return(run)
	return _c
}

// ListVPNs provides a mock function with given fields: ctx, in, opts
func (_m *CloudClient) ListVPNs(ctx context.Context, in *awi.ListVPNRequest, opts ...grpc.CallOption) (*awi.ListVPNResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.ListVPNResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListVPNRequest, ...grpc.CallOption) (*awi.ListVPNResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListVPNRequest, ...grpc.CallOption) *awi.ListVPNResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.ListVPNResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.ListVPNRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudClient_ListVPNs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVPNs'
type CloudClient_ListVPNs_Call struct {
	*mock.Call
}

// ListVPNs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.ListVPNRequest
//   - opts ...grpc.CallOption
func (_e *CloudClient_Expecter) ListVPNs(ctx interface{}, in interface{}, opts ...interface{}) *CloudClient_ListVPNs_Call {
	return &CloudClient_ListVPNs_Call{Call: _e.mock.On("ListVPNs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudClient_ListVPNs_Call) Run(run func(ctx context.Context, in *awi.ListVPNRequest, opts ...grpc.CallOption)) *CloudClient_ListVPNs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.ListVPNRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudClient_ListVPNs_Call) Return(_a0 *awi.ListVPNResponse, _a1 error) *CloudClient_ListVPNs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudClient_ListVPNs_Call) RunAndReturn(run func(context.Context, *awi.ListVPNRequest, ...grpc.CallOption) (*awi.ListVPNResponse, error)) *CloudClient_ListVPNs_Call {
	_c.Call.Return(run)
	return _c
}

// NewCloudClient creates a new instance of CloudClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudClient {
	mock := &CloudClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
