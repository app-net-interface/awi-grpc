// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	awi "github.com/app-net-interface/awi-grpc/pb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// NetworkSLAServiceClient is an autogenerated mock type for the NetworkSLAServiceClient type
type NetworkSLAServiceClient struct {
	mock.Mock
}

type NetworkSLAServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkSLAServiceClient) EXPECT() *NetworkSLAServiceClient_Expecter {
	return &NetworkSLAServiceClient_Expecter{mock: &_m.Mock}
}

// CreateNetworkSLA provides a mock function with given fields: ctx, in, opts
func (_m *NetworkSLAServiceClient) CreateNetworkSLA(ctx context.Context, in *awi.NetworkSLA, opts ...grpc.CallOption) (*awi.NetworkSLACreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.NetworkSLACreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLA, ...grpc.CallOption) (*awi.NetworkSLACreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLA, ...grpc.CallOption) *awi.NetworkSLACreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.NetworkSLACreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.NetworkSLA, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkSLAServiceClient_CreateNetworkSLA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNetworkSLA'
type NetworkSLAServiceClient_CreateNetworkSLA_Call struct {
	*mock.Call
}

// CreateNetworkSLA is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.NetworkSLA
//   - opts ...grpc.CallOption
func (_e *NetworkSLAServiceClient_Expecter) CreateNetworkSLA(ctx interface{}, in interface{}, opts ...interface{}) *NetworkSLAServiceClient_CreateNetworkSLA_Call {
	return &NetworkSLAServiceClient_CreateNetworkSLA_Call{Call: _e.mock.On("CreateNetworkSLA",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NetworkSLAServiceClient_CreateNetworkSLA_Call) Run(run func(ctx context.Context, in *awi.NetworkSLA, opts ...grpc.CallOption)) *NetworkSLAServiceClient_CreateNetworkSLA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.NetworkSLA), variadicArgs...)
	})
	return _c
}

func (_c *NetworkSLAServiceClient_CreateNetworkSLA_Call) Return(_a0 *awi.NetworkSLACreateResponse, _a1 error) *NetworkSLAServiceClient_CreateNetworkSLA_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkSLAServiceClient_CreateNetworkSLA_Call) RunAndReturn(run func(context.Context, *awi.NetworkSLA, ...grpc.CallOption) (*awi.NetworkSLACreateResponse, error)) *NetworkSLAServiceClient_CreateNetworkSLA_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkSLA provides a mock function with given fields: ctx, in, opts
func (_m *NetworkSLAServiceClient) DeleteNetworkSLA(ctx context.Context, in *awi.NetworkSLADeleteRequest, opts ...grpc.CallOption) (*awi.NetworkSLADeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.NetworkSLADeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLADeleteRequest, ...grpc.CallOption) (*awi.NetworkSLADeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLADeleteRequest, ...grpc.CallOption) *awi.NetworkSLADeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.NetworkSLADeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.NetworkSLADeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkSLAServiceClient_DeleteNetworkSLA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkSLA'
type NetworkSLAServiceClient_DeleteNetworkSLA_Call struct {
	*mock.Call
}

// DeleteNetworkSLA is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.NetworkSLADeleteRequest
//   - opts ...grpc.CallOption
func (_e *NetworkSLAServiceClient_Expecter) DeleteNetworkSLA(ctx interface{}, in interface{}, opts ...interface{}) *NetworkSLAServiceClient_DeleteNetworkSLA_Call {
	return &NetworkSLAServiceClient_DeleteNetworkSLA_Call{Call: _e.mock.On("DeleteNetworkSLA",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NetworkSLAServiceClient_DeleteNetworkSLA_Call) Run(run func(ctx context.Context, in *awi.NetworkSLADeleteRequest, opts ...grpc.CallOption)) *NetworkSLAServiceClient_DeleteNetworkSLA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.NetworkSLADeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *NetworkSLAServiceClient_DeleteNetworkSLA_Call) Return(_a0 *awi.NetworkSLADeleteResponse, _a1 error) *NetworkSLAServiceClient_DeleteNetworkSLA_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkSLAServiceClient_DeleteNetworkSLA_Call) RunAndReturn(run func(context.Context, *awi.NetworkSLADeleteRequest, ...grpc.CallOption) (*awi.NetworkSLADeleteResponse, error)) *NetworkSLAServiceClient_DeleteNetworkSLA_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworkSLAs provides a mock function with given fields: ctx, in, opts
func (_m *NetworkSLAServiceClient) ListNetworkSLAs(ctx context.Context, in *awi.NetworkSLAListReqest, opts ...grpc.CallOption) (*awi.NetworkSLAListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.NetworkSLAListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLAListReqest, ...grpc.CallOption) (*awi.NetworkSLAListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLAListReqest, ...grpc.CallOption) *awi.NetworkSLAListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.NetworkSLAListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.NetworkSLAListReqest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkSLAServiceClient_ListNetworkSLAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkSLAs'
type NetworkSLAServiceClient_ListNetworkSLAs_Call struct {
	*mock.Call
}

// ListNetworkSLAs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.NetworkSLAListReqest
//   - opts ...grpc.CallOption
func (_e *NetworkSLAServiceClient_Expecter) ListNetworkSLAs(ctx interface{}, in interface{}, opts ...interface{}) *NetworkSLAServiceClient_ListNetworkSLAs_Call {
	return &NetworkSLAServiceClient_ListNetworkSLAs_Call{Call: _e.mock.On("ListNetworkSLAs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NetworkSLAServiceClient_ListNetworkSLAs_Call) Run(run func(ctx context.Context, in *awi.NetworkSLAListReqest, opts ...grpc.CallOption)) *NetworkSLAServiceClient_ListNetworkSLAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.NetworkSLAListReqest), variadicArgs...)
	})
	return _c
}

func (_c *NetworkSLAServiceClient_ListNetworkSLAs_Call) Return(_a0 *awi.NetworkSLAListResponse, _a1 error) *NetworkSLAServiceClient_ListNetworkSLAs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkSLAServiceClient_ListNetworkSLAs_Call) RunAndReturn(run func(context.Context, *awi.NetworkSLAListReqest, ...grpc.CallOption) (*awi.NetworkSLAListResponse, error)) *NetworkSLAServiceClient_ListNetworkSLAs_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetworkSLAServiceClient creates a new instance of NetworkSLAServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkSLAServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkSLAServiceClient {
	mock := &NetworkSLAServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
