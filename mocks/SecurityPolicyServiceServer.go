// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	awi "github.com/app-net-interface/awi-grpc/pb"

	mock "github.com/stretchr/testify/mock"
)

// SecurityPolicyServiceServer is an autogenerated mock type for the SecurityPolicyServiceServer type
type SecurityPolicyServiceServer struct {
	mock.Mock
}

type SecurityPolicyServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityPolicyServiceServer) EXPECT() *SecurityPolicyServiceServer_Expecter {
	return &SecurityPolicyServiceServer_Expecter{mock: &_m.Mock}
}

// CreateAccessPolicy provides a mock function with given fields: _a0, _a1
func (_m *SecurityPolicyServiceServer) CreateAccessPolicy(_a0 context.Context, _a1 *awi.AccessPolicyCreateRequest) (*awi.AccessPolicyCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *awi.AccessPolicyCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyCreateRequest) (*awi.AccessPolicyCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyCreateRequest) *awi.AccessPolicyCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AccessPolicyCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AccessPolicyCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityPolicyServiceServer_CreateAccessPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessPolicy'
type SecurityPolicyServiceServer_CreateAccessPolicy_Call struct {
	*mock.Call
}

// CreateAccessPolicy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *awi.AccessPolicyCreateRequest
func (_e *SecurityPolicyServiceServer_Expecter) CreateAccessPolicy(_a0 interface{}, _a1 interface{}) *SecurityPolicyServiceServer_CreateAccessPolicy_Call {
	return &SecurityPolicyServiceServer_CreateAccessPolicy_Call{Call: _e.mock.On("CreateAccessPolicy", _a0, _a1)}
}

func (_c *SecurityPolicyServiceServer_CreateAccessPolicy_Call) Run(run func(_a0 context.Context, _a1 *awi.AccessPolicyCreateRequest)) *SecurityPolicyServiceServer_CreateAccessPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*awi.AccessPolicyCreateRequest))
	})
	return _c
}

func (_c *SecurityPolicyServiceServer_CreateAccessPolicy_Call) Return(_a0 *awi.AccessPolicyCreateResponse, _a1 error) *SecurityPolicyServiceServer_CreateAccessPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityPolicyServiceServer_CreateAccessPolicy_Call) RunAndReturn(run func(context.Context, *awi.AccessPolicyCreateRequest) (*awi.AccessPolicyCreateResponse, error)) *SecurityPolicyServiceServer_CreateAccessPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessPolicy provides a mock function with given fields: _a0, _a1
func (_m *SecurityPolicyServiceServer) DeleteAccessPolicy(_a0 context.Context, _a1 *awi.AccessPolicyDeleteRequest) (*awi.AccessPolicyDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *awi.AccessPolicyDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyDeleteRequest) (*awi.AccessPolicyDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyDeleteRequest) *awi.AccessPolicyDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AccessPolicyDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AccessPolicyDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityPolicyServiceServer_DeleteAccessPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessPolicy'
type SecurityPolicyServiceServer_DeleteAccessPolicy_Call struct {
	*mock.Call
}

// DeleteAccessPolicy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *awi.AccessPolicyDeleteRequest
func (_e *SecurityPolicyServiceServer_Expecter) DeleteAccessPolicy(_a0 interface{}, _a1 interface{}) *SecurityPolicyServiceServer_DeleteAccessPolicy_Call {
	return &SecurityPolicyServiceServer_DeleteAccessPolicy_Call{Call: _e.mock.On("DeleteAccessPolicy", _a0, _a1)}
}

func (_c *SecurityPolicyServiceServer_DeleteAccessPolicy_Call) Run(run func(_a0 context.Context, _a1 *awi.AccessPolicyDeleteRequest)) *SecurityPolicyServiceServer_DeleteAccessPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*awi.AccessPolicyDeleteRequest))
	})
	return _c
}

func (_c *SecurityPolicyServiceServer_DeleteAccessPolicy_Call) Return(_a0 *awi.AccessPolicyDeleteResponse, _a1 error) *SecurityPolicyServiceServer_DeleteAccessPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityPolicyServiceServer_DeleteAccessPolicy_Call) RunAndReturn(run func(context.Context, *awi.AccessPolicyDeleteRequest) (*awi.AccessPolicyDeleteResponse, error)) *SecurityPolicyServiceServer_DeleteAccessPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessPolicies provides a mock function with given fields: _a0, _a1
func (_m *SecurityPolicyServiceServer) ListAccessPolicies(_a0 context.Context, _a1 *awi.AccessPolicyListRequest) (*awi.AccessPolicyListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *awi.AccessPolicyListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyListRequest) (*awi.AccessPolicyListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyListRequest) *awi.AccessPolicyListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AccessPolicyListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AccessPolicyListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityPolicyServiceServer_ListAccessPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessPolicies'
type SecurityPolicyServiceServer_ListAccessPolicies_Call struct {
	*mock.Call
}

// ListAccessPolicies is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *awi.AccessPolicyListRequest
func (_e *SecurityPolicyServiceServer_Expecter) ListAccessPolicies(_a0 interface{}, _a1 interface{}) *SecurityPolicyServiceServer_ListAccessPolicies_Call {
	return &SecurityPolicyServiceServer_ListAccessPolicies_Call{Call: _e.mock.On("ListAccessPolicies", _a0, _a1)}
}

func (_c *SecurityPolicyServiceServer_ListAccessPolicies_Call) Run(run func(_a0 context.Context, _a1 *awi.AccessPolicyListRequest)) *SecurityPolicyServiceServer_ListAccessPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*awi.AccessPolicyListRequest))
	})
	return _c
}

func (_c *SecurityPolicyServiceServer_ListAccessPolicies_Call) Return(_a0 *awi.AccessPolicyListResponse, _a1 error) *SecurityPolicyServiceServer_ListAccessPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityPolicyServiceServer_ListAccessPolicies_Call) RunAndReturn(run func(context.Context, *awi.AccessPolicyListRequest) (*awi.AccessPolicyListResponse, error)) *SecurityPolicyServiceServer_ListAccessPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedSecurityPolicyServiceServer provides a mock function with given fields:
func (_m *SecurityPolicyServiceServer) mustEmbedUnimplementedSecurityPolicyServiceServer() {
	_m.Called()
}

// SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedSecurityPolicyServiceServer'
type SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedSecurityPolicyServiceServer is a helper method to define mock.On call
func (_e *SecurityPolicyServiceServer_Expecter) mustEmbedUnimplementedSecurityPolicyServiceServer() *SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call {
	return &SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedSecurityPolicyServiceServer")}
}

func (_c *SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call) Run(run func()) *SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call) Return() *SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call) RunAndReturn(run func()) *SecurityPolicyServiceServer_mustEmbedUnimplementedSecurityPolicyServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurityPolicyServiceServer creates a new instance of SecurityPolicyServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityPolicyServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityPolicyServiceServer {
	mock := &SecurityPolicyServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
