// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	awi "github.com/app-net-interface/awi-grpc/pb"

	mock "github.com/stretchr/testify/mock"
)

// NetworkSLAServiceServer is an autogenerated mock type for the NetworkSLAServiceServer type
type NetworkSLAServiceServer struct {
	mock.Mock
}

type NetworkSLAServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkSLAServiceServer) EXPECT() *NetworkSLAServiceServer_Expecter {
	return &NetworkSLAServiceServer_Expecter{mock: &_m.Mock}
}

// CreateNetworkSLA provides a mock function with given fields: _a0, _a1
func (_m *NetworkSLAServiceServer) CreateNetworkSLA(_a0 context.Context, _a1 *awi.NetworkSLA) (*awi.NetworkSLACreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *awi.NetworkSLACreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLA) (*awi.NetworkSLACreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLA) *awi.NetworkSLACreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.NetworkSLACreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.NetworkSLA) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkSLAServiceServer_CreateNetworkSLA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNetworkSLA'
type NetworkSLAServiceServer_CreateNetworkSLA_Call struct {
	*mock.Call
}

// CreateNetworkSLA is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *awi.NetworkSLA
func (_e *NetworkSLAServiceServer_Expecter) CreateNetworkSLA(_a0 interface{}, _a1 interface{}) *NetworkSLAServiceServer_CreateNetworkSLA_Call {
	return &NetworkSLAServiceServer_CreateNetworkSLA_Call{Call: _e.mock.On("CreateNetworkSLA", _a0, _a1)}
}

func (_c *NetworkSLAServiceServer_CreateNetworkSLA_Call) Run(run func(_a0 context.Context, _a1 *awi.NetworkSLA)) *NetworkSLAServiceServer_CreateNetworkSLA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*awi.NetworkSLA))
	})
	return _c
}

func (_c *NetworkSLAServiceServer_CreateNetworkSLA_Call) Return(_a0 *awi.NetworkSLACreateResponse, _a1 error) *NetworkSLAServiceServer_CreateNetworkSLA_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkSLAServiceServer_CreateNetworkSLA_Call) RunAndReturn(run func(context.Context, *awi.NetworkSLA) (*awi.NetworkSLACreateResponse, error)) *NetworkSLAServiceServer_CreateNetworkSLA_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNetworkSLA provides a mock function with given fields: _a0, _a1
func (_m *NetworkSLAServiceServer) DeleteNetworkSLA(_a0 context.Context, _a1 *awi.NetworkSLADeleteRequest) (*awi.NetworkSLADeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *awi.NetworkSLADeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLADeleteRequest) (*awi.NetworkSLADeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLADeleteRequest) *awi.NetworkSLADeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.NetworkSLADeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.NetworkSLADeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkSLAServiceServer_DeleteNetworkSLA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNetworkSLA'
type NetworkSLAServiceServer_DeleteNetworkSLA_Call struct {
	*mock.Call
}

// DeleteNetworkSLA is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *awi.NetworkSLADeleteRequest
func (_e *NetworkSLAServiceServer_Expecter) DeleteNetworkSLA(_a0 interface{}, _a1 interface{}) *NetworkSLAServiceServer_DeleteNetworkSLA_Call {
	return &NetworkSLAServiceServer_DeleteNetworkSLA_Call{Call: _e.mock.On("DeleteNetworkSLA", _a0, _a1)}
}

func (_c *NetworkSLAServiceServer_DeleteNetworkSLA_Call) Run(run func(_a0 context.Context, _a1 *awi.NetworkSLADeleteRequest)) *NetworkSLAServiceServer_DeleteNetworkSLA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*awi.NetworkSLADeleteRequest))
	})
	return _c
}

func (_c *NetworkSLAServiceServer_DeleteNetworkSLA_Call) Return(_a0 *awi.NetworkSLADeleteResponse, _a1 error) *NetworkSLAServiceServer_DeleteNetworkSLA_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkSLAServiceServer_DeleteNetworkSLA_Call) RunAndReturn(run func(context.Context, *awi.NetworkSLADeleteRequest) (*awi.NetworkSLADeleteResponse, error)) *NetworkSLAServiceServer_DeleteNetworkSLA_Call {
	_c.Call.Return(run)
	return _c
}

// ListNetworkSLAs provides a mock function with given fields: _a0, _a1
func (_m *NetworkSLAServiceServer) ListNetworkSLAs(_a0 context.Context, _a1 *awi.NetworkSLAListReqest) (*awi.NetworkSLAListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *awi.NetworkSLAListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLAListReqest) (*awi.NetworkSLAListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.NetworkSLAListReqest) *awi.NetworkSLAListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.NetworkSLAListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.NetworkSLAListReqest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkSLAServiceServer_ListNetworkSLAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNetworkSLAs'
type NetworkSLAServiceServer_ListNetworkSLAs_Call struct {
	*mock.Call
}

// ListNetworkSLAs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *awi.NetworkSLAListReqest
func (_e *NetworkSLAServiceServer_Expecter) ListNetworkSLAs(_a0 interface{}, _a1 interface{}) *NetworkSLAServiceServer_ListNetworkSLAs_Call {
	return &NetworkSLAServiceServer_ListNetworkSLAs_Call{Call: _e.mock.On("ListNetworkSLAs", _a0, _a1)}
}

func (_c *NetworkSLAServiceServer_ListNetworkSLAs_Call) Run(run func(_a0 context.Context, _a1 *awi.NetworkSLAListReqest)) *NetworkSLAServiceServer_ListNetworkSLAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*awi.NetworkSLAListReqest))
	})
	return _c
}

func (_c *NetworkSLAServiceServer_ListNetworkSLAs_Call) Return(_a0 *awi.NetworkSLAListResponse, _a1 error) *NetworkSLAServiceServer_ListNetworkSLAs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkSLAServiceServer_ListNetworkSLAs_Call) RunAndReturn(run func(context.Context, *awi.NetworkSLAListReqest) (*awi.NetworkSLAListResponse, error)) *NetworkSLAServiceServer_ListNetworkSLAs_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedNetworkSLAServiceServer provides a mock function with given fields:
func (_m *NetworkSLAServiceServer) mustEmbedUnimplementedNetworkSLAServiceServer() {
	_m.Called()
}

// NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedNetworkSLAServiceServer'
type NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedNetworkSLAServiceServer is a helper method to define mock.On call
func (_e *NetworkSLAServiceServer_Expecter) mustEmbedUnimplementedNetworkSLAServiceServer() *NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call {
	return &NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedNetworkSLAServiceServer")}
}

func (_c *NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call) Run(run func()) *NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call) Return() *NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call) RunAndReturn(run func()) *NetworkSLAServiceServer_mustEmbedUnimplementedNetworkSLAServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetworkSLAServiceServer creates a new instance of NetworkSLAServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkSLAServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkSLAServiceServer {
	mock := &NetworkSLAServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
