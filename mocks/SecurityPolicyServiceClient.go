// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	awi "github.com/app-net-interface/awi-grpc/pb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SecurityPolicyServiceClient is an autogenerated mock type for the SecurityPolicyServiceClient type
type SecurityPolicyServiceClient struct {
	mock.Mock
}

type SecurityPolicyServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityPolicyServiceClient) EXPECT() *SecurityPolicyServiceClient_Expecter {
	return &SecurityPolicyServiceClient_Expecter{mock: &_m.Mock}
}

// CreateAccessPolicy provides a mock function with given fields: ctx, in, opts
func (_m *SecurityPolicyServiceClient) CreateAccessPolicy(ctx context.Context, in *awi.AccessPolicyCreateRequest, opts ...grpc.CallOption) (*awi.AccessPolicyCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.AccessPolicyCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyCreateRequest, ...grpc.CallOption) (*awi.AccessPolicyCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyCreateRequest, ...grpc.CallOption) *awi.AccessPolicyCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AccessPolicyCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AccessPolicyCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityPolicyServiceClient_CreateAccessPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessPolicy'
type SecurityPolicyServiceClient_CreateAccessPolicy_Call struct {
	*mock.Call
}

// CreateAccessPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.AccessPolicyCreateRequest
//   - opts ...grpc.CallOption
func (_e *SecurityPolicyServiceClient_Expecter) CreateAccessPolicy(ctx interface{}, in interface{}, opts ...interface{}) *SecurityPolicyServiceClient_CreateAccessPolicy_Call {
	return &SecurityPolicyServiceClient_CreateAccessPolicy_Call{Call: _e.mock.On("CreateAccessPolicy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityPolicyServiceClient_CreateAccessPolicy_Call) Run(run func(ctx context.Context, in *awi.AccessPolicyCreateRequest, opts ...grpc.CallOption)) *SecurityPolicyServiceClient_CreateAccessPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.AccessPolicyCreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *SecurityPolicyServiceClient_CreateAccessPolicy_Call) Return(_a0 *awi.AccessPolicyCreateResponse, _a1 error) *SecurityPolicyServiceClient_CreateAccessPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityPolicyServiceClient_CreateAccessPolicy_Call) RunAndReturn(run func(context.Context, *awi.AccessPolicyCreateRequest, ...grpc.CallOption) (*awi.AccessPolicyCreateResponse, error)) *SecurityPolicyServiceClient_CreateAccessPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessPolicy provides a mock function with given fields: ctx, in, opts
func (_m *SecurityPolicyServiceClient) DeleteAccessPolicy(ctx context.Context, in *awi.AccessPolicyDeleteRequest, opts ...grpc.CallOption) (*awi.AccessPolicyDeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.AccessPolicyDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyDeleteRequest, ...grpc.CallOption) (*awi.AccessPolicyDeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyDeleteRequest, ...grpc.CallOption) *awi.AccessPolicyDeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AccessPolicyDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AccessPolicyDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityPolicyServiceClient_DeleteAccessPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessPolicy'
type SecurityPolicyServiceClient_DeleteAccessPolicy_Call struct {
	*mock.Call
}

// DeleteAccessPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.AccessPolicyDeleteRequest
//   - opts ...grpc.CallOption
func (_e *SecurityPolicyServiceClient_Expecter) DeleteAccessPolicy(ctx interface{}, in interface{}, opts ...interface{}) *SecurityPolicyServiceClient_DeleteAccessPolicy_Call {
	return &SecurityPolicyServiceClient_DeleteAccessPolicy_Call{Call: _e.mock.On("DeleteAccessPolicy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityPolicyServiceClient_DeleteAccessPolicy_Call) Run(run func(ctx context.Context, in *awi.AccessPolicyDeleteRequest, opts ...grpc.CallOption)) *SecurityPolicyServiceClient_DeleteAccessPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.AccessPolicyDeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *SecurityPolicyServiceClient_DeleteAccessPolicy_Call) Return(_a0 *awi.AccessPolicyDeleteResponse, _a1 error) *SecurityPolicyServiceClient_DeleteAccessPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityPolicyServiceClient_DeleteAccessPolicy_Call) RunAndReturn(run func(context.Context, *awi.AccessPolicyDeleteRequest, ...grpc.CallOption) (*awi.AccessPolicyDeleteResponse, error)) *SecurityPolicyServiceClient_DeleteAccessPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessPolicies provides a mock function with given fields: ctx, in, opts
func (_m *SecurityPolicyServiceClient) ListAccessPolicies(ctx context.Context, in *awi.AccessPolicyListRequest, opts ...grpc.CallOption) (*awi.AccessPolicyListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.AccessPolicyListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyListRequest, ...grpc.CallOption) (*awi.AccessPolicyListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AccessPolicyListRequest, ...grpc.CallOption) *awi.AccessPolicyListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AccessPolicyListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AccessPolicyListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityPolicyServiceClient_ListAccessPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessPolicies'
type SecurityPolicyServiceClient_ListAccessPolicies_Call struct {
	*mock.Call
}

// ListAccessPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.AccessPolicyListRequest
//   - opts ...grpc.CallOption
func (_e *SecurityPolicyServiceClient_Expecter) ListAccessPolicies(ctx interface{}, in interface{}, opts ...interface{}) *SecurityPolicyServiceClient_ListAccessPolicies_Call {
	return &SecurityPolicyServiceClient_ListAccessPolicies_Call{Call: _e.mock.On("ListAccessPolicies",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecurityPolicyServiceClient_ListAccessPolicies_Call) Run(run func(ctx context.Context, in *awi.AccessPolicyListRequest, opts ...grpc.CallOption)) *SecurityPolicyServiceClient_ListAccessPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.AccessPolicyListRequest), variadicArgs...)
	})
	return _c
}

func (_c *SecurityPolicyServiceClient_ListAccessPolicies_Call) Return(_a0 *awi.AccessPolicyListResponse, _a1 error) *SecurityPolicyServiceClient_ListAccessPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityPolicyServiceClient_ListAccessPolicies_Call) RunAndReturn(run func(context.Context, *awi.AccessPolicyListRequest, ...grpc.CallOption) (*awi.AccessPolicyListResponse, error)) *SecurityPolicyServiceClient_ListAccessPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurityPolicyServiceClient creates a new instance of SecurityPolicyServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityPolicyServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityPolicyServiceClient {
	mock := &SecurityPolicyServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
