// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	awi "github.com/app-net-interface/awi-grpc/pb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AppConnectionControllerClient is an autogenerated mock type for the AppConnectionControllerClient type
type AppConnectionControllerClient struct {
	mock.Mock
}

type AppConnectionControllerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AppConnectionControllerClient) EXPECT() *AppConnectionControllerClient_Expecter {
	return &AppConnectionControllerClient_Expecter{mock: &_m.Mock}
}

// ConnectApps provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) ConnectApps(ctx context.Context, in *awi.AppConnection, opts ...grpc.CallOption) (*awi.AppConnectionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.AppConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AppConnection, ...grpc.CallOption) (*awi.AppConnectionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AppConnection, ...grpc.CallOption) *awi.AppConnectionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AppConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AppConnection, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_ConnectApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectApps'
type AppConnectionControllerClient_ConnectApps_Call struct {
	*mock.Call
}

// ConnectApps is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.AppConnection
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) ConnectApps(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_ConnectApps_Call {
	return &AppConnectionControllerClient_ConnectApps_Call{Call: _e.mock.On("ConnectApps",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_ConnectApps_Call) Run(run func(ctx context.Context, in *awi.AppConnection, opts ...grpc.CallOption)) *AppConnectionControllerClient_ConnectApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.AppConnection), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_ConnectApps_Call) Return(_a0 *awi.AppConnectionResponse, _a1 error) *AppConnectionControllerClient_ConnectApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_ConnectApps_Call) RunAndReturn(run func(context.Context, *awi.AppConnection, ...grpc.CallOption) (*awi.AppConnectionResponse, error)) *AppConnectionControllerClient_ConnectApps_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAppConnectionPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) CreateAppConnectionPolicy(ctx context.Context, in *awi.CreateAppConnectionPolicyRequest, opts ...grpc.CallOption) (*awi.CreateAppConnectionPolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.CreateAppConnectionPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.CreateAppConnectionPolicyRequest, ...grpc.CallOption) (*awi.CreateAppConnectionPolicyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.CreateAppConnectionPolicyRequest, ...grpc.CallOption) *awi.CreateAppConnectionPolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.CreateAppConnectionPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.CreateAppConnectionPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_CreateAppConnectionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppConnectionPolicy'
type AppConnectionControllerClient_CreateAppConnectionPolicy_Call struct {
	*mock.Call
}

// CreateAppConnectionPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.CreateAppConnectionPolicyRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) CreateAppConnectionPolicy(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_CreateAppConnectionPolicy_Call {
	return &AppConnectionControllerClient_CreateAppConnectionPolicy_Call{Call: _e.mock.On("CreateAppConnectionPolicy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_CreateAppConnectionPolicy_Call) Run(run func(ctx context.Context, in *awi.CreateAppConnectionPolicyRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_CreateAppConnectionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.CreateAppConnectionPolicyRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_CreateAppConnectionPolicy_Call) Return(_a0 *awi.CreateAppConnectionPolicyResponse, _a1 error) *AppConnectionControllerClient_CreateAppConnectionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_CreateAppConnectionPolicy_Call) RunAndReturn(run func(context.Context, *awi.CreateAppConnectionPolicyRequest, ...grpc.CallOption) (*awi.CreateAppConnectionPolicyResponse, error)) *AppConnectionControllerClient_CreateAppConnectionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppConnectionPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) DeleteAppConnectionPolicy(ctx context.Context, in *awi.DeleteAppConnectionPolicyRequest, opts ...grpc.CallOption) (*awi.DeleteAppConnectionPolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.DeleteAppConnectionPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.DeleteAppConnectionPolicyRequest, ...grpc.CallOption) (*awi.DeleteAppConnectionPolicyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.DeleteAppConnectionPolicyRequest, ...grpc.CallOption) *awi.DeleteAppConnectionPolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.DeleteAppConnectionPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.DeleteAppConnectionPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_DeleteAppConnectionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppConnectionPolicy'
type AppConnectionControllerClient_DeleteAppConnectionPolicy_Call struct {
	*mock.Call
}

// DeleteAppConnectionPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.DeleteAppConnectionPolicyRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) DeleteAppConnectionPolicy(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_DeleteAppConnectionPolicy_Call {
	return &AppConnectionControllerClient_DeleteAppConnectionPolicy_Call{Call: _e.mock.On("DeleteAppConnectionPolicy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_DeleteAppConnectionPolicy_Call) Run(run func(ctx context.Context, in *awi.DeleteAppConnectionPolicyRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_DeleteAppConnectionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.DeleteAppConnectionPolicyRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_DeleteAppConnectionPolicy_Call) Return(_a0 *awi.DeleteAppConnectionPolicyResponse, _a1 error) *AppConnectionControllerClient_DeleteAppConnectionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_DeleteAppConnectionPolicy_Call) RunAndReturn(run func(context.Context, *awi.DeleteAppConnectionPolicyRequest, ...grpc.CallOption) (*awi.DeleteAppConnectionPolicyResponse, error)) *AppConnectionControllerClient_DeleteAppConnectionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectApps provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) DisconnectApps(ctx context.Context, in *awi.AppDisconnectionRequest, opts ...grpc.CallOption) (*awi.AppDisconnectionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.AppDisconnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AppDisconnectionRequest, ...grpc.CallOption) (*awi.AppDisconnectionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AppDisconnectionRequest, ...grpc.CallOption) *awi.AppDisconnectionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AppDisconnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AppDisconnectionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_DisconnectApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectApps'
type AppConnectionControllerClient_DisconnectApps_Call struct {
	*mock.Call
}

// DisconnectApps is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.AppDisconnectionRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) DisconnectApps(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_DisconnectApps_Call {
	return &AppConnectionControllerClient_DisconnectApps_Call{Call: _e.mock.On("DisconnectApps",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_DisconnectApps_Call) Run(run func(ctx context.Context, in *awi.AppDisconnectionRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_DisconnectApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.AppDisconnectionRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_DisconnectApps_Call) Return(_a0 *awi.AppDisconnectionResponse, _a1 error) *AppConnectionControllerClient_DisconnectApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_DisconnectApps_Call) RunAndReturn(run func(context.Context, *awi.AppDisconnectionRequest, ...grpc.CallOption) (*awi.AppDisconnectionResponse, error)) *AppConnectionControllerClient_DisconnectApps_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppConnection provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) GetAppConnection(ctx context.Context, in *awi.GetAppConnectionRequest, opts ...grpc.CallOption) (*awi.GetAppConnectionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.GetAppConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionRequest, ...grpc.CallOption) (*awi.GetAppConnectionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionRequest, ...grpc.CallOption) *awi.GetAppConnectionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.GetAppConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.GetAppConnectionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_GetAppConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppConnection'
type AppConnectionControllerClient_GetAppConnection_Call struct {
	*mock.Call
}

// GetAppConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.GetAppConnectionRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) GetAppConnection(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_GetAppConnection_Call {
	return &AppConnectionControllerClient_GetAppConnection_Call{Call: _e.mock.On("GetAppConnection",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_GetAppConnection_Call) Run(run func(ctx context.Context, in *awi.GetAppConnectionRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_GetAppConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.GetAppConnectionRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnection_Call) Return(_a0 *awi.GetAppConnectionResponse, _a1 error) *AppConnectionControllerClient_GetAppConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnection_Call) RunAndReturn(run func(context.Context, *awi.GetAppConnectionRequest, ...grpc.CallOption) (*awi.GetAppConnectionResponse, error)) *AppConnectionControllerClient_GetAppConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppConnectionEvents provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) GetAppConnectionEvents(ctx context.Context, in *awi.GetAppConnectionEventsRequest, opts ...grpc.CallOption) (*awi.AppConnectionEventsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.AppConnectionEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionEventsRequest, ...grpc.CallOption) (*awi.AppConnectionEventsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionEventsRequest, ...grpc.CallOption) *awi.AppConnectionEventsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AppConnectionEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.GetAppConnectionEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_GetAppConnectionEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppConnectionEvents'
type AppConnectionControllerClient_GetAppConnectionEvents_Call struct {
	*mock.Call
}

// GetAppConnectionEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.GetAppConnectionEventsRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) GetAppConnectionEvents(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_GetAppConnectionEvents_Call {
	return &AppConnectionControllerClient_GetAppConnectionEvents_Call{Call: _e.mock.On("GetAppConnectionEvents",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_GetAppConnectionEvents_Call) Run(run func(ctx context.Context, in *awi.GetAppConnectionEventsRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_GetAppConnectionEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.GetAppConnectionEventsRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnectionEvents_Call) Return(_a0 *awi.AppConnectionEventsResponse, _a1 error) *AppConnectionControllerClient_GetAppConnectionEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnectionEvents_Call) RunAndReturn(run func(context.Context, *awi.GetAppConnectionEventsRequest, ...grpc.CallOption) (*awi.AppConnectionEventsResponse, error)) *AppConnectionControllerClient_GetAppConnectionEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppConnectionPolicy provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) GetAppConnectionPolicy(ctx context.Context, in *awi.GetAppConnectionPolicyRequest, opts ...grpc.CallOption) (*awi.GetAppConnectionPolicyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.GetAppConnectionPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionPolicyRequest, ...grpc.CallOption) (*awi.GetAppConnectionPolicyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionPolicyRequest, ...grpc.CallOption) *awi.GetAppConnectionPolicyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.GetAppConnectionPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.GetAppConnectionPolicyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_GetAppConnectionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppConnectionPolicy'
type AppConnectionControllerClient_GetAppConnectionPolicy_Call struct {
	*mock.Call
}

// GetAppConnectionPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.GetAppConnectionPolicyRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) GetAppConnectionPolicy(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_GetAppConnectionPolicy_Call {
	return &AppConnectionControllerClient_GetAppConnectionPolicy_Call{Call: _e.mock.On("GetAppConnectionPolicy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_GetAppConnectionPolicy_Call) Run(run func(ctx context.Context, in *awi.GetAppConnectionPolicyRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_GetAppConnectionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.GetAppConnectionPolicyRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnectionPolicy_Call) Return(_a0 *awi.GetAppConnectionPolicyResponse, _a1 error) *AppConnectionControllerClient_GetAppConnectionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnectionPolicy_Call) RunAndReturn(run func(context.Context, *awi.GetAppConnectionPolicyRequest, ...grpc.CallOption) (*awi.GetAppConnectionPolicyResponse, error)) *AppConnectionControllerClient_GetAppConnectionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppConnectionStatistics provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) GetAppConnectionStatistics(ctx context.Context, in *awi.GetAppConnectionStatisticsRequest, opts ...grpc.CallOption) (*awi.AppConnectionStatisticsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.AppConnectionStatisticsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionStatisticsRequest, ...grpc.CallOption) (*awi.AppConnectionStatisticsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionStatisticsRequest, ...grpc.CallOption) *awi.AppConnectionStatisticsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AppConnectionStatisticsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.GetAppConnectionStatisticsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_GetAppConnectionStatistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppConnectionStatistics'
type AppConnectionControllerClient_GetAppConnectionStatistics_Call struct {
	*mock.Call
}

// GetAppConnectionStatistics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.GetAppConnectionStatisticsRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) GetAppConnectionStatistics(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_GetAppConnectionStatistics_Call {
	return &AppConnectionControllerClient_GetAppConnectionStatistics_Call{Call: _e.mock.On("GetAppConnectionStatistics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_GetAppConnectionStatistics_Call) Run(run func(ctx context.Context, in *awi.GetAppConnectionStatisticsRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_GetAppConnectionStatistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.GetAppConnectionStatisticsRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnectionStatistics_Call) Return(_a0 *awi.AppConnectionStatisticsResponse, _a1 error) *AppConnectionControllerClient_GetAppConnectionStatistics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnectionStatistics_Call) RunAndReturn(run func(context.Context, *awi.GetAppConnectionStatisticsRequest, ...grpc.CallOption) (*awi.AppConnectionStatisticsResponse, error)) *AppConnectionControllerClient_GetAppConnectionStatistics_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppConnectionStatus provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) GetAppConnectionStatus(ctx context.Context, in *awi.GetAppConnectionStatusRequest, opts ...grpc.CallOption) (*awi.AppConnectionStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.AppConnectionStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionStatusRequest, ...grpc.CallOption) (*awi.AppConnectionStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.GetAppConnectionStatusRequest, ...grpc.CallOption) *awi.AppConnectionStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.AppConnectionStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.GetAppConnectionStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_GetAppConnectionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppConnectionStatus'
type AppConnectionControllerClient_GetAppConnectionStatus_Call struct {
	*mock.Call
}

// GetAppConnectionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.GetAppConnectionStatusRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) GetAppConnectionStatus(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_GetAppConnectionStatus_Call {
	return &AppConnectionControllerClient_GetAppConnectionStatus_Call{Call: _e.mock.On("GetAppConnectionStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_GetAppConnectionStatus_Call) Run(run func(ctx context.Context, in *awi.GetAppConnectionStatusRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_GetAppConnectionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.GetAppConnectionStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnectionStatus_Call) Return(_a0 *awi.AppConnectionStatusResponse, _a1 error) *AppConnectionControllerClient_GetAppConnectionStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_GetAppConnectionStatus_Call) RunAndReturn(run func(context.Context, *awi.GetAppConnectionStatusRequest, ...grpc.CallOption) (*awi.AppConnectionStatusResponse, error)) *AppConnectionControllerClient_GetAppConnectionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetMatchedResources provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) GetMatchedResources(ctx context.Context, in *awi.AppConnection, opts ...grpc.CallOption) (*awi.GetMatchedResourcesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.GetMatchedResourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AppConnection, ...grpc.CallOption) (*awi.GetMatchedResourcesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.AppConnection, ...grpc.CallOption) *awi.GetMatchedResourcesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.GetMatchedResourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.AppConnection, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_GetMatchedResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMatchedResources'
type AppConnectionControllerClient_GetMatchedResources_Call struct {
	*mock.Call
}

// GetMatchedResources is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.AppConnection
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) GetMatchedResources(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_GetMatchedResources_Call {
	return &AppConnectionControllerClient_GetMatchedResources_Call{Call: _e.mock.On("GetMatchedResources",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_GetMatchedResources_Call) Run(run func(ctx context.Context, in *awi.AppConnection, opts ...grpc.CallOption)) *AppConnectionControllerClient_GetMatchedResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.AppConnection), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_GetMatchedResources_Call) Return(_a0 *awi.GetMatchedResourcesResponse, _a1 error) *AppConnectionControllerClient_GetMatchedResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_GetMatchedResources_Call) RunAndReturn(run func(context.Context, *awi.AppConnection, ...grpc.CallOption) (*awi.GetMatchedResourcesResponse, error)) *AppConnectionControllerClient_GetMatchedResources_Call {
	_c.Call.Return(run)
	return _c
}

// ListAppConnectionPolicies provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) ListAppConnectionPolicies(ctx context.Context, in *awi.ListAppConnectionPoliciesRequest, opts ...grpc.CallOption) (*awi.ListAppConnectionPoliciesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.ListAppConnectionPoliciesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListAppConnectionPoliciesRequest, ...grpc.CallOption) (*awi.ListAppConnectionPoliciesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListAppConnectionPoliciesRequest, ...grpc.CallOption) *awi.ListAppConnectionPoliciesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.ListAppConnectionPoliciesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.ListAppConnectionPoliciesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_ListAppConnectionPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAppConnectionPolicies'
type AppConnectionControllerClient_ListAppConnectionPolicies_Call struct {
	*mock.Call
}

// ListAppConnectionPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.ListAppConnectionPoliciesRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) ListAppConnectionPolicies(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_ListAppConnectionPolicies_Call {
	return &AppConnectionControllerClient_ListAppConnectionPolicies_Call{Call: _e.mock.On("ListAppConnectionPolicies",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_ListAppConnectionPolicies_Call) Run(run func(ctx context.Context, in *awi.ListAppConnectionPoliciesRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_ListAppConnectionPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.ListAppConnectionPoliciesRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_ListAppConnectionPolicies_Call) Return(_a0 *awi.ListAppConnectionPoliciesResponse, _a1 error) *AppConnectionControllerClient_ListAppConnectionPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_ListAppConnectionPolicies_Call) RunAndReturn(run func(context.Context, *awi.ListAppConnectionPoliciesRequest, ...grpc.CallOption) (*awi.ListAppConnectionPoliciesResponse, error)) *AppConnectionControllerClient_ListAppConnectionPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectedApps provides a mock function with given fields: ctx, in, opts
func (_m *AppConnectionControllerClient) ListConnectedApps(ctx context.Context, in *awi.ListAppConnectionsRequest, opts ...grpc.CallOption) (*awi.ListAppConnectionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *awi.ListAppConnectionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListAppConnectionsRequest, ...grpc.CallOption) (*awi.ListAppConnectionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *awi.ListAppConnectionsRequest, ...grpc.CallOption) *awi.ListAppConnectionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*awi.ListAppConnectionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *awi.ListAppConnectionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppConnectionControllerClient_ListConnectedApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectedApps'
type AppConnectionControllerClient_ListConnectedApps_Call struct {
	*mock.Call
}

// ListConnectedApps is a helper method to define mock.On call
//   - ctx context.Context
//   - in *awi.ListAppConnectionsRequest
//   - opts ...grpc.CallOption
func (_e *AppConnectionControllerClient_Expecter) ListConnectedApps(ctx interface{}, in interface{}, opts ...interface{}) *AppConnectionControllerClient_ListConnectedApps_Call {
	return &AppConnectionControllerClient_ListConnectedApps_Call{Call: _e.mock.On("ListConnectedApps",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AppConnectionControllerClient_ListConnectedApps_Call) Run(run func(ctx context.Context, in *awi.ListAppConnectionsRequest, opts ...grpc.CallOption)) *AppConnectionControllerClient_ListConnectedApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*awi.ListAppConnectionsRequest), variadicArgs...)
	})
	return _c
}

func (_c *AppConnectionControllerClient_ListConnectedApps_Call) Return(_a0 *awi.ListAppConnectionsResponse, _a1 error) *AppConnectionControllerClient_ListConnectedApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AppConnectionControllerClient_ListConnectedApps_Call) RunAndReturn(run func(context.Context, *awi.ListAppConnectionsRequest, ...grpc.CallOption) (*awi.ListAppConnectionsResponse, error)) *AppConnectionControllerClient_ListConnectedApps_Call {
	_c.Call.Return(run)
	return _c
}

// NewAppConnectionControllerClient creates a new instance of AppConnectionControllerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConnectionControllerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConnectionControllerClient {
	mock := &AppConnectionControllerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
